include operator "#"
word "include"
less-than operator "<"
word "linux"
division operator "/"
word "export"
struct member operator "."
word "h"
greater-than operator ">"
include operator "#"
word "include"
less-than operator "<"
word "linux"
division operator "/"
word "timex"
struct member operator "."
word "h"
greater-than operator ">"
include operator "#"
word "include"
less-than operator "<"
word "linux"
division operator "/"
word "capability"
struct member operator "."
word "h"
greater-than operator ">"
include operator "#"
word "include"
less-than operator "<"
word "linux"
division operator "/"
word "timekeeper_internal"
struct member operator "."
word "h"
greater-than operator ">"
include operator "#"
word "include"
less-than operator "<"
word "linux"
division operator "/"
word "errno"
struct member operator "."
word "h"
greater-than operator ">"
include operator "#"
word "include"
less-than operator "<"
word "linux"
division operator "/"
word "syscalls"
struct member operator "."
word "h"
greater-than operator ">"
include operator "#"
word "include"
less-than operator "<"
word "linux"
division operator "/"
word "security"
struct member operator "."
word "h"
greater-than operator ">"
include operator "#"
word "include"
less-than operator "<"
word "linux"
division operator "/"
word "fs"
struct member operator "."
word "h"
greater-than operator ">"
include operator "#"
word "include"
less-than operator "<"
word "linux"
division operator "/"
word "math64"
struct member operator "."
word "h"
greater-than operator ">"
include operator "#"
word "include"
less-than operator "<"
word "linux"
division operator "/"
word "ptrace"
struct member operator "."
word "h"
greater-than operator ">"
include operator "#"
word "include"
less-than operator "<"
word "asm"
division operator "/"
word "uaccess"
struct member operator "."
word "h"
greater-than operator ">"
include operator "#"
word "include"
less-than operator "<"
word "asm"
division operator "/"
word "unistd"
struct member operator "."
word "h"
greater-than operator ">"
include operator "#"
word "include"
less-than operator "<"
word "generated"
division operator "/"
word "timeconst"
struct member operator "."
word "h"
greater-than operator ">"
include operator "#"
word "include"
string literal '"timekeeping.h"'
reserved word "struct"
word "timezone"
word "sys_tz"
end-of-statement operator ";"
word "EXPORT_SYMBOL"
opening parenthesis "("
word "sys_tz"
closing parenthesis ")"
end-of-statement operator ";"
include operator "#"
word "ifdef"
word "__ARCH_WANT_SYS_TIME"
word "SYSCALL_DEFINE1"
opening parenthesis "("
word "time"
comma ","
word "time_t"
word "__user"
multiplication operator/pointer operator "*"
comma ","
word "tloc"
closing parenthesis ")"
opening brace "{"
word "time_t"
word "i"
assignment operator "="
word "get_seconds"
opening parenthesis "("
closing parenthesis ")"
end-of-statement operator ";"
reserved word "if"
opening parenthesis "("
word "tloc"
closing parenthesis ")"
opening brace "{"
reserved word "if"
opening parenthesis "("
word "put_user"
opening parenthesis "("
word "i"
comma ","
word "tloc"
closing parenthesis ")"
closing parenthesis ")"
reserved word "return"
subtraction operator "-"
word "EFAULT"
end-of-statement operator ";"
closing brace "}"
word "force_successful_syscall_return"
opening parenthesis "("
closing parenthesis ")"
end-of-statement operator ";"
reserved word "return"
word "i"
end-of-statement operator ";"
closing brace "}"
word "SYSCALL_DEFINE1"
opening parenthesis "("
word "stime"
comma ","
word "time_t"
word "__user"
multiplication operator/pointer operator "*"
comma ","
word "tptr"
closing parenthesis ")"
opening brace "{"
reserved word "struct"
word "timespec"
word "tv"
end-of-statement operator ";"
reserved word "int"
word "err"
end-of-statement operator ";"
reserved word "if"
opening parenthesis "("
word "get_user"
opening parenthesis "("
word "tv"
struct member operator "."
word "tv_sec"
comma ","
word "tptr"
closing parenthesis ")"
closing parenthesis ")"
reserved word "return"
subtraction operator "-"
word "EFAULT"
end-of-statement operator ";"
word "tv"
struct member operator "."
word "tv_nsec"
assignment operator "="
zero integer "0"
end-of-statement operator ";"
word "err"
assignment operator "="
word "security_settime"
opening parenthesis "("
bitwise-and operator/address operator "&"
word "tv"
comma ","
word "NULL"
closing parenthesis ")"
end-of-statement operator ";"
reserved word "if"
opening parenthesis "("
word "err"
closing parenthesis ")"
reserved word "return"
word "err"
end-of-statement operator ";"
word "do_settimeofday"
opening parenthesis "("
bitwise-and operator/address operator "&"
word "tv"
closing parenthesis ")"
end-of-statement operator ";"
reserved word "return"
zero integer "0"
end-of-statement operator ";"
closing brace "}"
include operator "#"
word "endif"
word "SYSCALL_DEFINE2"
opening parenthesis "("
word "gettimeofday"
comma ","
reserved word "struct"
word "timeval"
word "__user"
multiplication operator/pointer operator "*"
comma ","
word "tv"
comma ","
reserved word "struct"
word "timezone"
word "__user"
multiplication operator/pointer operator "*"
comma ","
word "tz"
closing parenthesis ")"
opening brace "{"
reserved word "if"
opening parenthesis "("
word "likely"
opening parenthesis "("
word "tv"
not-equals operator "!="
word "NULL"
closing parenthesis ")"
closing parenthesis ")"
opening brace "{"
reserved word "struct"
word "timeval"
word "ktv"
end-of-statement operator ";"
word "do_gettimeofday"
opening parenthesis "("
bitwise-and operator/address operator "&"
word "ktv"
closing parenthesis ")"
end-of-statement operator ";"
reserved word "if"
opening parenthesis "("
word "copy_to_user"
opening parenthesis "("
word "tv"
comma ","
bitwise-and operator/address operator "&"
word "ktv"
comma ","
reserved word "sizeof"
opening parenthesis "("
word "ktv"
closing parenthesis ")"
closing parenthesis ")"
closing parenthesis ")"
reserved word "return"
subtraction operator "-"
word "EFAULT"
end-of-statement operator ";"
closing brace "}"
reserved word "if"
opening parenthesis "("
word "unlikely"
opening parenthesis "("
word "tz"
not-equals operator "!="
word "NULL"
closing parenthesis ")"
closing parenthesis ")"
opening brace "{"
reserved word "if"
opening parenthesis "("
word "copy_to_user"
opening parenthesis "("
word "tz"
comma ","
bitwise-and operator/address operator "&"
word "sys_tz"
comma ","
reserved word "sizeof"
opening parenthesis "("
word "sys_tz"
closing parenthesis ")"
closing parenthesis ")"
closing parenthesis ")"
reserved word "return"
subtraction operator "-"
word "EFAULT"
end-of-statement operator ";"
closing brace "}"
reserved word "return"
zero integer "0"
end-of-statement operator ";"
closing brace "}"
reserved word "int"
word "persistent_clock_is_local"
end-of-statement operator ";"
reserved word "static"
word "inline"
word "void"
word "warp_clock"
opening parenthesis "("
word "void"
closing parenthesis ")"
opening brace "{"
reserved word "if"
opening parenthesis "("
word "sys_tz"
struct member operator "."
word "tz_minuteswest"
not-equals operator "!="
zero integer "0"
closing parenthesis ")"
opening brace "{"
reserved word "struct"
word "timespec"
word "adjust"
end-of-statement operator ";"
word "persistent_clock_is_local"
assignment operator "="
decimal integer "1"
end-of-statement operator ";"
word "adjust"
struct member operator "."
word "tv_sec"
assignment operator "="
word "sys_tz"
struct member operator "."
word "tz_minuteswest"
multiplication operator/pointer operator "*"
decimal integer "60"
end-of-statement operator ";"
word "adjust"
struct member operator "."
word "tv_nsec"
assignment operator "="
zero integer "0"
end-of-statement operator ";"
word "timekeeping_inject_offset"
opening parenthesis "("
bitwise-and operator/address operator "&"
word "adjust"
closing parenthesis ")"
end-of-statement operator ";"
closing brace "}"
closing brace "}"
reserved word "int"
word "do_sys_settimeofday"
opening parenthesis "("
reserved word "const"
reserved word "struct"
word "timespec"
multiplication operator/pointer operator "*"
word "tv"
comma ","
reserved word "const"
reserved word "struct"
word "timezone"
multiplication operator/pointer operator "*"
word "tz"
closing parenthesis ")"
opening brace "{"
reserved word "static"
reserved word "int"
word "firsttime"
assignment operator "="
decimal integer "1"
end-of-statement operator ";"
reserved word "int"
word "error"
assignment operator "="
zero integer "0"
end-of-statement operator ";"
reserved word "if"
opening parenthesis "("
word "tv"
logical-and operator "&&"
logical-not operator "!"
word "timespec_valid"
opening parenthesis "("
word "tv"
closing parenthesis ")"
closing parenthesis ")"
reserved word "return"
subtraction operator "-"
word "EINVAL"
end-of-statement operator ";"
word "error"
assignment operator "="
word "security_settime"
opening parenthesis "("
word "tv"
comma ","
word "tz"
closing parenthesis ")"
end-of-statement operator ";"
reserved word "if"
opening parenthesis "("
word "error"
closing parenthesis ")"
reserved word "return"
word "error"
end-of-statement operator ";"
reserved word "if"
opening parenthesis "("
word "tz"
closing parenthesis ")"
opening brace "{"
reserved word "if"
opening parenthesis "("
word "tz"
struct pointer operator "->"
word "tz_minuteswest"
greater-than operator ">"
decimal integer "15"
multiplication operator/pointer operator "*"
decimal integer "60"
logical-or operator "||"
word "tz"
struct pointer operator "->"
word "tz_minuteswest"
less-than operator "<"
subtraction operator "-"
decimal integer "15"
multiplication operator/pointer operator "*"
decimal integer "60"
closing parenthesis ")"
reserved word "return"
subtraction operator "-"
word "EINVAL"
end-of-statement operator ";"
word "sys_tz"
assignment operator "="
multiplication operator/pointer operator "*"
word "tz"
end-of-statement operator ";"
word "update_vsyscall_tz"
opening parenthesis "("
closing parenthesis ")"
end-of-statement operator ";"
reserved word "if"
opening parenthesis "("
word "firsttime"
closing parenthesis ")"
opening brace "{"
word "firsttime"
assignment operator "="
zero integer "0"
end-of-statement operator ";"
reserved word "if"
opening parenthesis "("
logical-not operator "!"
word "tv"
closing parenthesis ")"
word "warp_clock"
opening parenthesis "("
closing parenthesis ")"
end-of-statement operator ";"
closing brace "}"
closing brace "}"
reserved word "if"
opening parenthesis "("
word "tv"
closing parenthesis ")"
reserved word "return"
word "do_settimeofday"
opening parenthesis "("
word "tv"
closing parenthesis ")"
end-of-statement operator ";"
reserved word "return"
zero integer "0"
end-of-statement operator ";"
closing brace "}"
word "SYSCALL_DEFINE2"
opening parenthesis "("
word "settimeofday"
comma ","
reserved word "struct"
word "timeval"
word "__user"
multiplication operator/pointer operator "*"
comma ","
word "tv"
comma ","
reserved word "struct"
word "timezone"
word "__user"
multiplication operator/pointer operator "*"
comma ","
word "tz"
closing parenthesis ")"
opening brace "{"
reserved word "struct"
word "timeval"
word "user_tv"
end-of-statement operator ";"
reserved word "struct"
word "timespec"
word "new_ts"
end-of-statement operator ";"
reserved word "struct"
word "timezone"
word "new_tz"
end-of-statement operator ";"
reserved word "if"
opening parenthesis "("
word "tv"
closing parenthesis ")"
opening brace "{"
reserved word "if"
opening parenthesis "("
word "copy_from_user"
opening parenthesis "("
bitwise-and operator/address operator "&"
word "user_tv"
comma ","
word "tv"
comma ","
reserved word "sizeof"
opening parenthesis "("
multiplication operator/pointer operator "*"
word "tv"
closing parenthesis ")"
closing parenthesis ")"
closing parenthesis ")"
reserved word "return"
subtraction operator "-"
word "EFAULT"
end-of-statement operator ";"
reserved word "if"
opening parenthesis "("
logical-not operator "!"
word "timeval_valid"
opening parenthesis "("
bitwise-and operator/address operator "&"
word "user_tv"
closing parenthesis ")"
closing parenthesis ")"
reserved word "return"
subtraction operator "-"
word "EINVAL"
end-of-statement operator ";"
word "new_ts"
struct member operator "."
word "tv_sec"
assignment operator "="
word "user_tv"
struct member operator "."
word "tv_sec"
end-of-statement operator ";"
word "new_ts"
struct member operator "."
word "tv_nsec"
assignment operator "="
word "user_tv"
struct member operator "."
word "tv_usec"
multiplication operator/pointer operator "*"
word "NSEC_PER_USEC"
end-of-statement operator ";"
closing brace "}"
reserved word "if"
opening parenthesis "("
word "tz"
closing parenthesis ")"
opening brace "{"
reserved word "if"
opening parenthesis "("
word "copy_from_user"
opening parenthesis "("
bitwise-and operator/address operator "&"
word "new_tz"
comma ","
word "tz"
comma ","
reserved word "sizeof"
opening parenthesis "("
multiplication operator/pointer operator "*"
word "tz"
closing parenthesis ")"
closing parenthesis ")"
closing parenthesis ")"
reserved word "return"
subtraction operator "-"
word "EFAULT"
end-of-statement operator ";"
closing brace "}"
reserved word "return"
word "do_sys_settimeofday"
opening parenthesis "("
word "tv"
ternary question mark operator "?"
bitwise-and operator/address operator "&"
word "new_ts"
ternary colon operator ":"
word "NULL"
comma ","
word "tz"
ternary question mark operator "?"
bitwise-and operator/address operator "&"
word "new_tz"
ternary colon operator ":"
word "NULL"
closing parenthesis ")"
end-of-statement operator ";"
closing brace "}"
word "SYSCALL_DEFINE1"
opening parenthesis "("
word "adjtimex"
comma ","
reserved word "struct"
word "timex"
word "__user"
multiplication operator/pointer operator "*"
comma ","
word "txc_p"
closing parenthesis ")"
opening brace "{"
reserved word "struct"
word "timex"
word "txc"
end-of-statement operator ";"
reserved word "int"
word "ret"
end-of-statement operator ";"
reserved word "if"
opening parenthesis "("
word "copy_from_user"
opening parenthesis "("
bitwise-and operator/address operator "&"
word "txc"
comma ","
word "txc_p"
comma ","
reserved word "sizeof"
opening parenthesis "("
reserved word "struct"
word "timex"
closing parenthesis ")"
closing parenthesis ")"
closing parenthesis ")"
reserved word "return"
subtraction operator "-"
word "EFAULT"
end-of-statement operator ";"
word "ret"
assignment operator "="
word "do_adjtimex"
opening parenthesis "("
bitwise-and operator/address operator "&"
word "txc"
closing parenthesis ")"
end-of-statement operator ";"
reserved word "return"
word "copy_to_user"
opening parenthesis "("
word "txc_p"
comma ","
bitwise-and operator/address operator "&"
word "txc"
comma ","
reserved word "sizeof"
opening parenthesis "("
reserved word "struct"
word "timex"
closing parenthesis ")"
closing parenthesis ")"
ternary question mark operator "?"
subtraction operator "-"
word "EFAULT"
ternary colon operator ":"
word "ret"
end-of-statement operator ";"
closing brace "}"
reserved word "struct"
word "timespec"
word "current_fs_time"
opening parenthesis "("
reserved word "struct"
word "super_block"
multiplication operator/pointer operator "*"
word "sb"
closing parenthesis ")"
opening brace "{"
reserved word "struct"
word "timespec"
word "now"
assignment operator "="
word "current_kernel_time"
opening parenthesis "("
closing parenthesis ")"
end-of-statement operator ";"
reserved word "return"
word "timespec_trunc"
opening parenthesis "("
word "now"
comma ","
word "sb"
struct pointer operator "->"
word "s_time_gran"
closing parenthesis ")"
end-of-statement operator ";"
closing brace "}"
word "EXPORT_SYMBOL"
opening parenthesis "("
word "current_fs_time"
closing parenthesis ")"
end-of-statement operator ";"
word "unsigned"
reserved word "int"
word "jiffies_to_msecs"
opening parenthesis "("
reserved word "const"
word "unsigned"
reserved word "long"
word "j"
closing parenthesis ")"
opening brace "{"
include operator "#"
reserved word "if"
word "HZ"
less-than-or-equal-to operator "<="
word "MSEC_PER_SEC"
logical-and operator "&&"
logical-not operator "!"
opening parenthesis "("
word "MSEC_PER_SEC"
mod operator "%"
word "HZ"
closing parenthesis ")"
reserved word "return"
opening parenthesis "("
word "MSEC_PER_SEC"
division operator "/"
word "HZ"
closing parenthesis ")"
multiplication operator/pointer operator "*"
word "j"
end-of-statement operator ";"
include operator "#"
word "elif"
word "HZ"
greater-than operator ">"
word "MSEC_PER_SEC"
logical-and operator "&&"
logical-not operator "!"
opening parenthesis "("
word "HZ"
mod operator "%"
word "MSEC_PER_SEC"
closing parenthesis ")"
reserved word "return"
opening parenthesis "("
word "j"
addition operator "+"
opening parenthesis "("
word "HZ"
division operator "/"
word "MSEC_PER_SEC"
closing parenthesis ")"
subtraction operator "-"
decimal integer "1"
closing parenthesis ")"
division operator "/"
opening parenthesis "("
word "HZ"
division operator "/"
word "MSEC_PER_SEC"
closing parenthesis ")"
end-of-statement operator ";"
include operator "#"
reserved word "else"
include operator "#"
reserved word "if"
word "BITS_PER_LONG"
equality operator "=="
decimal integer "32"
reserved word "return"
opening parenthesis "("
word "HZ_TO_MSEC_MUL32"
multiplication operator/pointer operator "*"
word "j"
closing parenthesis ")"
right-shift operator ">>"
word "HZ_TO_MSEC_SHR32"
end-of-statement operator ";"
include operator "#"
reserved word "else"
reserved word "return"
opening parenthesis "("
word "j"
multiplication operator/pointer operator "*"
word "HZ_TO_MSEC_NUM"
closing parenthesis ")"
division operator "/"
word "HZ_TO_MSEC_DEN"
end-of-statement operator ";"
include operator "#"
word "endif"
include operator "#"
word "endif"
closing brace "}"
word "EXPORT_SYMBOL"
opening parenthesis "("
word "jiffies_to_msecs"
closing parenthesis ")"
end-of-statement operator ";"
word "unsigned"
reserved word "int"
word "jiffies_to_usecs"
opening parenthesis "("
reserved word "const"
word "unsigned"
reserved word "long"
word "j"
closing parenthesis ")"
opening brace "{"
word "BUILD_BUG_ON"
opening parenthesis "("
word "HZ"
greater-than operator ">"
word "USEC_PER_SEC"
closing parenthesis ")"
end-of-statement operator ";"
include operator "#"
reserved word "if"
logical-not operator "!"
opening parenthesis "("
word "USEC_PER_SEC"
mod operator "%"
word "HZ"
closing parenthesis ")"
reserved word "return"
opening parenthesis "("
word "USEC_PER_SEC"
division operator "/"
word "HZ"
closing parenthesis ")"
multiplication operator/pointer operator "*"
word "j"
end-of-statement operator ";"
include operator "#"
reserved word "else"
include operator "#"
reserved word "if"
word "BITS_PER_LONG"
equality operator "=="
decimal integer "32"
reserved word "return"
opening parenthesis "("
word "HZ_TO_USEC_MUL32"
multiplication operator/pointer operator "*"
word "j"
closing parenthesis ")"
right-shift operator ">>"
word "HZ_TO_USEC_SHR32"
end-of-statement operator ";"
include operator "#"
reserved word "else"
reserved word "return"
opening parenthesis "("
word "j"
multiplication operator/pointer operator "*"
word "HZ_TO_USEC_NUM"
closing parenthesis ")"
division operator "/"
word "HZ_TO_USEC_DEN"
end-of-statement operator ";"
include operator "#"
word "endif"
include operator "#"
word "endif"
closing brace "}"
word "EXPORT_SYMBOL"
opening parenthesis "("
word "jiffies_to_usecs"
closing parenthesis ")"
end-of-statement operator ";"
reserved word "struct"
word "timespec"
word "timespec_trunc"
opening parenthesis "("
reserved word "struct"
word "timespec"
word "t"
comma ","
word "unsigned"
word "gran"
closing parenthesis ")"
opening brace "{"
reserved word "if"
opening parenthesis "("
word "gran"
equality operator "=="
decimal integer "1"
closing parenthesis ")"
opening brace "{"
closing brace "}"
reserved word "else"
reserved word "if"
opening parenthesis "("
word "gran"
equality operator "=="
word "NSEC_PER_SEC"
closing parenthesis ")"
opening brace "{"
word "t"
struct member operator "."
word "tv_nsec"
assignment operator "="
zero integer "0"
end-of-statement operator ";"
closing brace "}"
reserved word "else"
reserved word "if"
opening parenthesis "("
word "gran"
greater-than operator ">"
decimal integer "1"
logical-and operator "&&"
word "gran"
less-than operator "<"
word "NSEC_PER_SEC"
closing parenthesis ")"
opening brace "{"
word "t"
struct member operator "."
word "tv_nsec"
minus-equals operator "-="
word "t"
struct member operator "."
word "tv_nsec"
mod operator "%"
word "gran"
end-of-statement operator ";"
closing brace "}"
reserved word "else"
opening brace "{"
word "WARN"
opening parenthesis "("
decimal integer "1"
comma ","
string literal '"illegal file time granularity: %u"'
comma ","
word "gran"
closing parenthesis ")"
end-of-statement operator ";"
closing brace "}"
reserved word "return"
word "t"
end-of-statement operator ";"
closing brace "}"
word "EXPORT_SYMBOL"
opening parenthesis "("
word "timespec_trunc"
closing parenthesis ")"
end-of-statement operator ";"
word "time64_t"
word "mktime64"
opening parenthesis "("
reserved word "const"
word "unsigned"
reserved word "int"
word "year0"
comma ","
reserved word "const"
word "unsigned"
reserved word "int"
word "mon0"
comma ","
reserved word "const"
word "unsigned"
reserved word "int"
word "day"
comma ","
reserved word "const"
word "unsigned"
reserved word "int"
word "hour"
comma ","
reserved word "const"
word "unsigned"
reserved word "int"
word "min"
comma ","
reserved word "const"
word "unsigned"
reserved word "int"
word "sec"
closing parenthesis ")"
opening brace "{"
word "unsigned"
reserved word "int"
word "mon"
assignment operator "="
word "mon0"
comma ","
word "year"
assignment operator "="
word "year0"
end-of-statement operator ";"
reserved word "if"
opening parenthesis "("
zero integer "0"
greater-than-or-equal-to operator ">="
opening parenthesis "("
reserved word "int"
closing parenthesis ")"
opening parenthesis "("
word "mon"
minus-equals operator "-="
decimal integer "2"
closing parenthesis ")"
closing parenthesis ")"
opening brace "{"
word "mon"
plus-equals operator "+="
decimal integer "12"
end-of-statement operator ";"
word "year"
minus-equals operator "-="
decimal integer "1"
end-of-statement operator ";"
closing brace "}"
reserved word "return"
opening parenthesis "("
opening parenthesis "("
opening parenthesis "("
opening parenthesis "("
word "time64_t"
closing parenthesis ")"
opening parenthesis "("
word "year"
division operator "/"
decimal integer "4"
subtraction operator "-"
word "year"
division operator "/"
decimal integer "100"
addition operator "+"
word "year"
division operator "/"
decimal integer "400"
addition operator "+"
decimal integer "367"
multiplication operator/pointer operator "*"
word "mon"
division operator "/"
decimal integer "12"
addition operator "+"
word "day"
closing parenthesis ")"
addition operator "+"
word "year"
multiplication operator/pointer operator "*"
decimal integer "365"
subtraction operator "-"
decimal integer "719499"
closing parenthesis ")"
multiplication operator/pointer operator "*"
decimal integer "24"
addition operator "+"
word "hour"
closing parenthesis ")"
multiplication operator/pointer operator "*"
decimal integer "60"
addition operator "+"
word "min"
closing parenthesis ")"
multiplication operator/pointer operator "*"
decimal integer "60"
addition operator "+"
word "sec"
end-of-statement operator ";"
closing brace "}"
word "EXPORT_SYMBOL"
opening parenthesis "("
word "mktime64"
closing parenthesis ")"
end-of-statement operator ";"
word "void"
word "set_normalized_timespec"
opening parenthesis "("
reserved word "struct"
word "timespec"
multiplication operator/pointer operator "*"
word "ts"
comma ","
word "time_t"
word "sec"
comma ","
word "s64"
word "nsec"
closing parenthesis ")"
opening brace "{"
word "while"
opening parenthesis "("
word "nsec"
greater-than-or-equal-to operator ">="
word "NSEC_PER_SEC"
closing parenthesis ")"
opening brace "{"
word "asm"
opening parenthesis "("
string literal '""'
ternary colon operator ":"
string literal '"+rm"'
opening parenthesis "("
word "nsec"
closing parenthesis ")"
closing parenthesis ")"
end-of-statement operator ";"
word "nsec"
minus-equals operator "-="
word "NSEC_PER_SEC"
end-of-statement operator ";"
increment operator "++"
word "sec"
end-of-statement operator ";"
closing brace "}"
word "while"
opening parenthesis "("
word "nsec"
less-than operator "<"
zero integer "0"
closing parenthesis ")"
opening brace "{"
word "asm"
opening parenthesis "("
string literal '""'
ternary colon operator ":"
string literal '"+rm"'
opening parenthesis "("
word "nsec"
closing parenthesis ")"
closing parenthesis ")"
end-of-statement operator ";"
word "nsec"
plus-equals operator "+="
word "NSEC_PER_SEC"
end-of-statement operator ";"
decrement operator "--"
word "sec"
end-of-statement operator ";"
closing brace "}"
word "ts"
struct pointer operator "->"
word "tv_sec"
assignment operator "="
word "sec"
end-of-statement operator ";"
word "ts"
struct pointer operator "->"
word "tv_nsec"
assignment operator "="
word "nsec"
end-of-statement operator ";"
closing brace "}"
word "EXPORT_SYMBOL"
opening parenthesis "("
word "set_normalized_timespec"
closing parenthesis ")"
end-of-statement operator ";"
reserved word "struct"
word "timespec"
word "ns_to_timespec"
opening parenthesis "("
reserved word "const"
word "s64"
word "nsec"
closing parenthesis ")"
opening brace "{"
reserved word "struct"
word "timespec"
word "ts"
end-of-statement operator ";"
word "s32"
word "rem"
end-of-statement operator ";"
reserved word "if"
opening parenthesis "("
logical-not operator "!"
word "nsec"
closing parenthesis ")"
reserved word "return"
opening parenthesis "("
reserved word "struct"
word "timespec"
closing parenthesis ")"
opening brace "{"
zero integer "0"
comma ","
zero integer "0"
closing brace "}"
end-of-statement operator ";"
word "ts"
struct member operator "."
word "tv_sec"
assignment operator "="
word "div_s64_rem"
opening parenthesis "("
word "nsec"
comma ","
word "NSEC_PER_SEC"
comma ","
bitwise-and operator/address operator "&"
word "rem"
closing parenthesis ")"
end-of-statement operator ";"
reserved word "if"
opening parenthesis "("
word "unlikely"
opening parenthesis "("
word "rem"
less-than operator "<"
zero integer "0"
closing parenthesis ")"
closing parenthesis ")"
opening brace "{"
word "ts"
struct member operator "."
word "tv_sec"
decrement operator "--"
end-of-statement operator ";"
word "rem"
plus-equals operator "+="
word "NSEC_PER_SEC"
end-of-statement operator ";"
closing brace "}"
word "ts"
struct member operator "."
word "tv_nsec"
assignment operator "="
word "rem"
end-of-statement operator ";"
reserved word "return"
word "ts"
end-of-statement operator ";"
closing brace "}"
word "EXPORT_SYMBOL"
opening parenthesis "("
word "ns_to_timespec"
closing parenthesis ")"
end-of-statement operator ";"
reserved word "struct"
word "timeval"
word "ns_to_timeval"
opening parenthesis "("
reserved word "const"
word "s64"
word "nsec"
closing parenthesis ")"
opening brace "{"
reserved word "struct"
word "timespec"
word "ts"
assignment operator "="
word "ns_to_timespec"
opening parenthesis "("
word "nsec"
closing parenthesis ")"
end-of-statement operator ";"
reserved word "struct"
word "timeval"
word "tv"
end-of-statement operator ";"
word "tv"
struct member operator "."
word "tv_sec"
assignment operator "="
word "ts"
struct member operator "."
word "tv_sec"
end-of-statement operator ";"
word "tv"
struct member operator "."
word "tv_usec"
assignment operator "="
opening parenthesis "("
word "suseconds_t"
closing parenthesis ")"
word "ts"
struct member operator "."
word "tv_nsec"
division operator "/"
decimal integer "1000"
end-of-statement operator ";"
reserved word "return"
word "tv"
end-of-statement operator ";"
closing brace "}"
word "EXPORT_SYMBOL"
opening parenthesis "("
word "ns_to_timeval"
closing parenthesis ")"
end-of-statement operator ";"
include operator "#"
reserved word "if"
word "BITS_PER_LONG"
equality operator "=="
decimal integer "32"
word "void"
word "set_normalized_timespec64"
opening parenthesis "("
reserved word "struct"
word "timespec64"
multiplication operator/pointer operator "*"
word "ts"
comma ","
word "time64_t"
word "sec"
comma ","
word "s64"
word "nsec"
closing parenthesis ")"
opening brace "{"
word "while"
opening parenthesis "("
word "nsec"
greater-than-or-equal-to operator ">="
word "NSEC_PER_SEC"
closing parenthesis ")"
opening brace "{"
word "asm"
opening parenthesis "("
string literal '""'
ternary colon operator ":"
string literal '"+rm"'
opening parenthesis "("
word "nsec"
closing parenthesis ")"
closing parenthesis ")"
end-of-statement operator ";"
word "nsec"
minus-equals operator "-="
word "NSEC_PER_SEC"
end-of-statement operator ";"
increment operator "++"
word "sec"
end-of-statement operator ";"
closing brace "}"
word "while"
opening parenthesis "("
word "nsec"
less-than operator "<"
zero integer "0"
closing parenthesis ")"
opening brace "{"
word "asm"
opening parenthesis "("
string literal '""'
ternary colon operator ":"
string literal '"+rm"'
opening parenthesis "("
word "nsec"
closing parenthesis ")"
closing parenthesis ")"
end-of-statement operator ";"
word "nsec"
plus-equals operator "+="
word "NSEC_PER_SEC"
end-of-statement operator ";"
decrement operator "--"
word "sec"
end-of-statement operator ";"
closing brace "}"
word "ts"
struct pointer operator "->"
word "tv_sec"
assignment operator "="
word "sec"
end-of-statement operator ";"
word "ts"
struct pointer operator "->"
word "tv_nsec"
assignment operator "="
word "nsec"
end-of-statement operator ";"
closing brace "}"
word "EXPORT_SYMBOL"
opening parenthesis "("
word "set_normalized_timespec64"
closing parenthesis ")"
end-of-statement operator ";"
reserved word "struct"
word "timespec64"
word "ns_to_timespec64"
opening parenthesis "("
reserved word "const"
word "s64"
word "nsec"
closing parenthesis ")"
opening brace "{"
reserved word "struct"
word "timespec64"
word "ts"
end-of-statement operator ";"
word "s32"
word "rem"
end-of-statement operator ";"
reserved word "if"
opening parenthesis "("
logical-not operator "!"
word "nsec"
closing parenthesis ")"
reserved word "return"
opening parenthesis "("
reserved word "struct"
word "timespec64"
closing parenthesis ")"
opening brace "{"
zero integer "0"
comma ","
zero integer "0"
closing brace "}"
end-of-statement operator ";"
word "ts"
struct member operator "."
word "tv_sec"
assignment operator "="
word "div_s64_rem"
opening parenthesis "("
word "nsec"
comma ","
word "NSEC_PER_SEC"
comma ","
bitwise-and operator/address operator "&"
word "rem"
closing parenthesis ")"
end-of-statement operator ";"
reserved word "if"
opening parenthesis "("
word "unlikely"
opening parenthesis "("
word "rem"
less-than operator "<"
zero integer "0"
closing parenthesis ")"
closing parenthesis ")"
opening brace "{"
word "ts"
struct member operator "."
word "tv_sec"
decrement operator "--"
end-of-statement operator ";"
word "rem"
plus-equals operator "+="
word "NSEC_PER_SEC"
end-of-statement operator ";"
closing brace "}"
word "ts"
struct member operator "."
word "tv_nsec"
assignment operator "="
word "rem"
end-of-statement operator ";"
reserved word "return"
word "ts"
end-of-statement operator ";"
closing brace "}"
word "EXPORT_SYMBOL"
opening parenthesis "("
word "ns_to_timespec64"
closing parenthesis ")"
end-of-statement operator ";"
include operator "#"
word "endif"
word "unsigned"
reserved word "long"
word "__msecs_to_jiffies"
opening parenthesis "("
reserved word "const"
word "unsigned"
reserved word "int"
word "m"
closing parenthesis ")"
opening brace "{"
reserved word "if"
opening parenthesis "("
opening parenthesis "("
reserved word "int"
closing parenthesis ")"
word "m"
less-than operator "<"
zero integer "0"
closing parenthesis ")"
reserved word "return"
word "MAX_JIFFY_OFFSET"
end-of-statement operator ";"
reserved word "return"
word "_msecs_to_jiffies"
opening parenthesis "("
word "m"
closing parenthesis ")"
end-of-statement operator ";"
closing brace "}"
word "EXPORT_SYMBOL"
opening parenthesis "("
word "__msecs_to_jiffies"
closing parenthesis ")"
end-of-statement operator ";"
word "unsigned"
reserved word "long"
word "__usecs_to_jiffies"
opening parenthesis "("
reserved word "const"
word "unsigned"
reserved word "int"
word "u"
closing parenthesis ")"
opening brace "{"
reserved word "if"
opening parenthesis "("
word "u"
greater-than operator ">"
word "jiffies_to_usecs"
opening parenthesis "("
word "MAX_JIFFY_OFFSET"
closing parenthesis ")"
closing parenthesis ")"
reserved word "return"
word "MAX_JIFFY_OFFSET"
end-of-statement operator ";"
reserved word "return"
word "_usecs_to_jiffies"
opening parenthesis "("
word "u"
closing parenthesis ")"
end-of-statement operator ";"
closing brace "}"
word "EXPORT_SYMBOL"
opening parenthesis "("
word "__usecs_to_jiffies"
closing parenthesis ")"
end-of-statement operator ";"
reserved word "static"
word "unsigned"
reserved word "long"
word "__timespec64_to_jiffies"
opening parenthesis "("
word "u64"
word "sec"
comma ","
reserved word "long"
word "nsec"
closing parenthesis ")"
opening brace "{"
word "nsec"
assignment operator "="
word "nsec"
addition operator "+"
word "TICK_NSEC"
subtraction operator "-"
decimal integer "1"
end-of-statement operator ";"
reserved word "if"
opening parenthesis "("
word "sec"
greater-than-or-equal-to operator ">="
word "MAX_SEC_IN_JIFFIES"
closing parenthesis ")"
opening brace "{"
word "sec"
assignment operator "="
word "MAX_SEC_IN_JIFFIES"
end-of-statement operator ";"
word "nsec"
assignment operator "="
zero integer "0"
end-of-statement operator ";"
closing brace "}"
reserved word "return"
opening parenthesis "("
opening parenthesis "("
word "sec"
multiplication operator/pointer operator "*"
word "SEC_CONVERSION"
closing parenthesis ")"
addition operator "+"
opening parenthesis "("
opening parenthesis "("
opening parenthesis "("
word "u64"
closing parenthesis ")"
word "nsec"
multiplication operator/pointer operator "*"
word "NSEC_CONVERSION"
closing parenthesis ")"
right-shift operator ">>"
opening parenthesis "("
word "NSEC_JIFFIE_SC"
subtraction operator "-"
word "SEC_JIFFIE_SC"
closing parenthesis ")"
closing parenthesis ")"
closing parenthesis ")"
right-shift operator ">>"
word "SEC_JIFFIE_SC"
end-of-statement operator ";"
closing brace "}"
reserved word "static"
word "unsigned"
reserved word "long"
word "__timespec_to_jiffies"
opening parenthesis "("
word "unsigned"
reserved word "long"
word "sec"
comma ","
reserved word "long"
word "nsec"
closing parenthesis ")"
opening brace "{"
reserved word "return"
word "__timespec64_to_jiffies"
opening parenthesis "("
opening parenthesis "("
word "u64"
closing parenthesis ")"
word "sec"
comma ","
word "nsec"
closing parenthesis ")"
end-of-statement operator ";"
closing brace "}"
word "unsigned"
reserved word "long"
word "timespec64_to_jiffies"
opening parenthesis "("
reserved word "const"
reserved word "struct"
word "timespec64"
multiplication operator/pointer operator "*"
word "value"
closing parenthesis ")"
opening brace "{"
reserved word "return"
word "__timespec64_to_jiffies"
opening parenthesis "("
word "value"
struct pointer operator "->"
word "tv_sec"
comma ","
word "value"
struct pointer operator "->"
word "tv_nsec"
closing parenthesis ")"
end-of-statement operator ";"
closing brace "}"
word "EXPORT_SYMBOL"
opening parenthesis "("
word "timespec64_to_jiffies"
closing parenthesis ")"
end-of-statement operator ";"
word "void"
word "jiffies_to_timespec64"
opening parenthesis "("
reserved word "const"
word "unsigned"
reserved word "long"
word "jiffies"
comma ","
reserved word "struct"
word "timespec64"
multiplication operator/pointer operator "*"
word "value"
closing parenthesis ")"
opening brace "{"
word "u32"
word "rem"
end-of-statement operator ";"
word "value"
struct pointer operator "->"
word "tv_sec"
assignment operator "="
word "div_u64_rem"
opening parenthesis "("
opening parenthesis "("
word "u64"
closing parenthesis ")"
word "jiffies"
multiplication operator/pointer operator "*"
word "TICK_NSEC"
comma ","
word "NSEC_PER_SEC"
comma ","
bitwise-and operator/address operator "&"
word "rem"
closing parenthesis ")"
end-of-statement operator ";"
word "value"
struct pointer operator "->"
word "tv_nsec"
assignment operator "="
word "rem"
end-of-statement operator ";"
closing brace "}"
word "EXPORT_SYMBOL"
opening parenthesis "("
word "jiffies_to_timespec64"
closing parenthesis ")"
end-of-statement operator ";"
word "unsigned"
reserved word "long"
word "timeval_to_jiffies"
opening parenthesis "("
reserved word "const"
reserved word "struct"
word "timeval"
multiplication operator/pointer operator "*"
word "value"
closing parenthesis ")"
opening brace "{"
reserved word "return"
word "__timespec_to_jiffies"
opening parenthesis "("
word "value"
struct pointer operator "->"
word "tv_sec"
comma ","
word "value"
struct pointer operator "->"
word "tv_usec"
multiplication operator/pointer operator "*"
word "NSEC_PER_USEC"
closing parenthesis ")"
end-of-statement operator ";"
closing brace "}"
word "EXPORT_SYMBOL"
opening parenthesis "("
word "timeval_to_jiffies"
closing parenthesis ")"
end-of-statement operator ";"
word "void"
word "jiffies_to_timeval"
opening parenthesis "("
reserved word "const"
word "unsigned"
reserved word "long"
word "jiffies"
comma ","
reserved word "struct"
word "timeval"
multiplication operator/pointer operator "*"
word "value"
closing parenthesis ")"
opening brace "{"
word "u32"
word "rem"
end-of-statement operator ";"
word "value"
struct pointer operator "->"
word "tv_sec"
assignment operator "="
word "div_u64_rem"
opening parenthesis "("
opening parenthesis "("
word "u64"
closing parenthesis ")"
word "jiffies"
multiplication operator/pointer operator "*"
word "TICK_NSEC"
comma ","
word "NSEC_PER_SEC"
comma ","
bitwise-and operator/address operator "&"
word "rem"
closing parenthesis ")"
end-of-statement operator ";"
word "value"
struct pointer operator "->"
word "tv_usec"
assignment operator "="
word "rem"
division operator "/"
word "NSEC_PER_USEC"
end-of-statement operator ";"
closing brace "}"
word "EXPORT_SYMBOL"
opening parenthesis "("
word "jiffies_to_timeval"
closing parenthesis ")"
end-of-statement operator ";"
word "clock_t"
word "jiffies_to_clock_t"
opening parenthesis "("
word "unsigned"
reserved word "long"
word "x"
closing parenthesis ")"
opening brace "{"
include operator "#"
reserved word "if"
opening parenthesis "("
word "TICK_NSEC"
mod operator "%"
opening parenthesis "("
word "NSEC_PER_SEC"
division operator "/"
word "USER_HZ"
closing parenthesis ")"
closing parenthesis ")"
equality operator "=="
zero integer "0"
include operator "#"
reserved word "if"
word "HZ"
less-than operator "<"
word "USER_HZ"
reserved word "return"
word "x"
multiplication operator/pointer operator "*"
opening parenthesis "("
word "USER_HZ"
division operator "/"
word "HZ"
closing parenthesis ")"
end-of-statement operator ";"
include operator "#"
reserved word "else"
reserved word "return"
word "x"
division operator "/"
opening parenthesis "("
word "HZ"
division operator "/"
word "USER_HZ"
closing parenthesis ")"
end-of-statement operator ";"
include operator "#"
word "endif"
include operator "#"
reserved word "else"
reserved word "return"
word "div_u64"
opening parenthesis "("
opening parenthesis "("
word "u64"
closing parenthesis ")"
word "x"
multiplication operator/pointer operator "*"
word "TICK_NSEC"
comma ","
word "NSEC_PER_SEC"
division operator "/"
word "USER_HZ"
closing parenthesis ")"
end-of-statement operator ";"
include operator "#"
word "endif"
closing brace "}"
word "EXPORT_SYMBOL"
opening parenthesis "("
word "jiffies_to_clock_t"
closing parenthesis ")"
end-of-statement operator ";"
word "unsigned"
reserved word "long"
word "clock_t_to_jiffies"
opening parenthesis "("
word "unsigned"
reserved word "long"
word "x"
closing parenthesis ")"
opening brace "{"
include operator "#"
reserved word "if"
opening parenthesis "("
word "HZ"
mod operator "%"
word "USER_HZ"
closing parenthesis ")"
equality operator "=="
zero integer "0"
reserved word "if"
opening parenthesis "("
word "x"
greater-than-or-equal-to operator ">="
bitwise-not operator "~"
zero integer "0"
word "UL"
division operator "/"
opening parenthesis "("
word "HZ"
division operator "/"
word "USER_HZ"
closing parenthesis ")"
closing parenthesis ")"
reserved word "return"
bitwise-not operator "~"
zero integer "0"
word "UL"
end-of-statement operator ";"
reserved word "return"
word "x"
multiplication operator/pointer operator "*"
opening parenthesis "("
word "HZ"
division operator "/"
word "USER_HZ"
closing parenthesis ")"
end-of-statement operator ";"
include operator "#"
reserved word "else"
reserved word "if"
opening parenthesis "("
word "x"
greater-than-or-equal-to operator ">="
bitwise-not operator "~"
zero integer "0"
word "UL"
division operator "/"
word "HZ"
multiplication operator/pointer operator "*"
word "USER_HZ"
closing parenthesis ")"
reserved word "return"
bitwise-not operator "~"
zero integer "0"
word "UL"
end-of-statement operator ";"
reserved word "return"
word "div_u64"
opening parenthesis "("
opening parenthesis "("
word "u64"
closing parenthesis ")"
word "x"
multiplication operator/pointer operator "*"
word "HZ"
comma ","
word "USER_HZ"
closing parenthesis ")"
end-of-statement operator ";"
include operator "#"
word "endif"
closing brace "}"
word "EXPORT_SYMBOL"
opening parenthesis "("
word "clock_t_to_jiffies"
closing parenthesis ")"
end-of-statement operator ";"
word "u64"
word "jiffies_64_to_clock_t"
opening parenthesis "("
word "u64"
word "x"
closing parenthesis ")"
opening brace "{"
include operator "#"
reserved word "if"
opening parenthesis "("
word "TICK_NSEC"
mod operator "%"
opening parenthesis "("
word "NSEC_PER_SEC"
division operator "/"
word "USER_HZ"
closing parenthesis ")"
closing parenthesis ")"
equality operator "=="
zero integer "0"
include operator "#"
reserved word "if"
word "HZ"
less-than operator "<"
word "USER_HZ"
word "x"
assignment operator "="
word "div_u64"
opening parenthesis "("
word "x"
multiplication operator/pointer operator "*"
word "USER_HZ"
comma ","
word "HZ"
closing parenthesis ")"
end-of-statement operator ";"
include operator "#"
word "elif"
word "HZ"
greater-than operator ">"
word "USER_HZ"
word "x"
assignment operator "="
word "div_u64"
opening parenthesis "("
word "x"
comma ","
word "HZ"
division operator "/"
word "USER_HZ"
closing parenthesis ")"
end-of-statement operator ";"
include operator "#"
reserved word "else"
include operator "#"
word "endif"
include operator "#"
reserved word "else"
word "x"
assignment operator "="
word "div_u64"
opening parenthesis "("
word "x"
multiplication operator/pointer operator "*"
word "TICK_NSEC"
comma ","
opening parenthesis "("
word "NSEC_PER_SEC"
division operator "/"
word "USER_HZ"
closing parenthesis ")"
closing parenthesis ")"
end-of-statement operator ";"
include operator "#"
word "endif"
reserved word "return"
word "x"
end-of-statement operator ";"
closing brace "}"
word "EXPORT_SYMBOL"
opening parenthesis "("
word "jiffies_64_to_clock_t"
closing parenthesis ")"
end-of-statement operator ";"
word "u64"
word "nsec_to_clock_t"
opening parenthesis "("
word "u64"
word "x"
closing parenthesis ")"
opening brace "{"
include operator "#"
reserved word "if"
opening parenthesis "("
word "NSEC_PER_SEC"
mod operator "%"
word "USER_HZ"
closing parenthesis ")"
equality operator "=="
zero integer "0"
reserved word "return"
word "div_u64"
opening parenthesis "("
word "x"
comma ","
word "NSEC_PER_SEC"
division operator "/"
word "USER_HZ"
closing parenthesis ")"
end-of-statement operator ";"
include operator "#"
word "elif"
opening parenthesis "("
word "USER_HZ"
mod operator "%"
decimal integer "512"
closing parenthesis ")"
equality operator "=="
zero integer "0"
reserved word "return"
word "div_u64"
opening parenthesis "("
word "x"
multiplication operator/pointer operator "*"
word "USER_HZ"
division operator "/"
decimal integer "512"
comma ","
word "NSEC_PER_SEC"
division operator "/"
decimal integer "512"
closing parenthesis ")"
end-of-statement operator ";"
include operator "#"
reserved word "else"
reserved word "return"
word "div_u64"
opening parenthesis "("
word "x"
multiplication operator/pointer operator "*"
decimal integer "9"
comma ","
opening parenthesis "("
decimal integer "9"
word "ull"
multiplication operator/pointer operator "*"
word "NSEC_PER_SEC"
addition operator "+"
opening parenthesis "("
word "USER_HZ"
division operator "/"
decimal integer "2"
closing parenthesis ")"
closing parenthesis ")"
division operator "/"
word "USER_HZ"
closing parenthesis ")"
end-of-statement operator ";"
include operator "#"
word "endif"
closing brace "}"
word "u64"
word "nsecs_to_jiffies64"
opening parenthesis "("
word "u64"
word "n"
closing parenthesis ")"
opening brace "{"
include operator "#"
reserved word "if"
opening parenthesis "("
word "NSEC_PER_SEC"
mod operator "%"
word "HZ"
closing parenthesis ")"
equality operator "=="
zero integer "0"
reserved word "return"
word "div_u64"
opening parenthesis "("
word "n"
comma ","
word "NSEC_PER_SEC"
division operator "/"
word "HZ"
closing parenthesis ")"
end-of-statement operator ";"
include operator "#"
word "elif"
opening parenthesis "("
word "HZ"
mod operator "%"
decimal integer "512"
closing parenthesis ")"
equality operator "=="
zero integer "0"
reserved word "return"
word "div_u64"
opening parenthesis "("
word "n"
multiplication operator/pointer operator "*"
word "HZ"
division operator "/"
decimal integer "512"
comma ","
word "NSEC_PER_SEC"
division operator "/"
decimal integer "512"
closing parenthesis ")"
end-of-statement operator ";"
include operator "#"
reserved word "else"
reserved word "return"
word "div_u64"
opening parenthesis "("
word "n"
multiplication operator/pointer operator "*"
decimal integer "9"
comma ","
opening parenthesis "("
decimal integer "9"
word "ull"
multiplication operator/pointer operator "*"
word "NSEC_PER_SEC"
addition operator "+"
word "HZ"
division operator "/"
decimal integer "2"
closing parenthesis ")"
division operator "/"
word "HZ"
closing parenthesis ")"
end-of-statement operator ";"
include operator "#"
word "endif"
closing brace "}"
word "EXPORT_SYMBOL"
opening parenthesis "("
word "nsecs_to_jiffies64"
closing parenthesis ")"
end-of-statement operator ";"
word "unsigned"
reserved word "long"
word "nsecs_to_jiffies"
opening parenthesis "("
word "u64"
word "n"
closing parenthesis ")"
opening brace "{"
reserved word "return"
opening parenthesis "("
word "unsigned"
reserved word "long"
closing parenthesis ")"
word "nsecs_to_jiffies64"
opening parenthesis "("
word "n"
closing parenthesis ")"
end-of-statement operator ";"
closing brace "}"
word "EXPORT_SYMBOL_GPL"
opening parenthesis "("
word "nsecs_to_jiffies"
closing parenthesis ")"
end-of-statement operator ";"
reserved word "struct"
word "timespec"
word "timespec_add_safe"
opening parenthesis "("
reserved word "const"
reserved word "struct"
word "timespec"
word "lhs"
comma ","
reserved word "const"
reserved word "struct"
word "timespec"
word "rhs"
closing parenthesis ")"
opening brace "{"
reserved word "struct"
word "timespec"
word "res"
end-of-statement operator ";"
word "set_normalized_timespec"
opening parenthesis "("
bitwise-and operator/address operator "&"
word "res"
comma ","
word "lhs"
struct member operator "."
word "tv_sec"
addition operator "+"
word "rhs"
struct member operator "."
word "tv_sec"
comma ","
word "lhs"
struct member operator "."
word "tv_nsec"
addition operator "+"
word "rhs"
struct member operator "."
word "tv_nsec"
closing parenthesis ")"
end-of-statement operator ";"
reserved word "if"
opening parenthesis "("
word "res"
struct member operator "."
word "tv_sec"
less-than operator "<"
word "lhs"
struct member operator "."
word "tv_sec"
logical-or operator "||"
word "res"
struct member operator "."
word "tv_sec"
less-than operator "<"
word "rhs"
struct member operator "."
word "tv_sec"
closing parenthesis ")"
word "res"
struct member operator "."
word "tv_sec"
assignment operator "="
word "TIME_T_MAX"
end-of-statement operator ";"
reserved word "return"
word "res"
end-of-statement operator ";"
closing brace "}"
