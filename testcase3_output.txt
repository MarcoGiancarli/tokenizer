include operator "#"
word "include"
less-than operator "<"
word "linux"
division operator "/"
word "proc_fs"
struct member operator "."
word "h"
greater-than operator ">"
include operator "#"
word "include"
less-than operator "<"
word "linux"
division operator "/"
word "smp"
struct member operator "."
word "h"
greater-than operator ">"
include operator "#"
word "include"
less-than operator "<"
word "linux"
division operator "/"
word "init"
struct member operator "."
word "h"
greater-than operator ">"
include operator "#"
word "include"
less-than operator "<"
word "linux"
division operator "/"
word "notifier"
struct member operator "."
word "h"
greater-than operator ">"
include operator "#"
word "include"
less-than operator "<"
word "linux"
division operator "/"
word "sched"
struct member operator "."
word "h"
greater-than operator ">"
include operator "#"
word "include"
less-than operator "<"
word "linux"
division operator "/"
word "unistd"
struct member operator "."
word "h"
greater-than operator ">"
include operator "#"
word "include"
less-than operator "<"
word "linux"
division operator "/"
word "cpu"
struct member operator "."
word "h"
greater-than operator ">"
include operator "#"
word "include"
less-than operator "<"
word "linux"
division operator "/"
word "oom"
struct member operator "."
word "h"
greater-than operator ">"
include operator "#"
word "include"
less-than operator "<"
word "linux"
division operator "/"
word "rcupdate"
struct member operator "."
word "h"
greater-than operator ">"
include operator "#"
word "include"
less-than operator "<"
word "linux"
division operator "/"
word "export"
struct member operator "."
word "h"
greater-than operator ">"
include operator "#"
word "include"
less-than operator "<"
word "linux"
division operator "/"
word "bug"
struct member operator "."
word "h"
greater-than operator ">"
include operator "#"
word "include"
less-than operator "<"
word "linux"
division operator "/"
word "kthread"
struct member operator "."
word "h"
greater-than operator ">"
include operator "#"
word "include"
less-than operator "<"
word "linux"
division operator "/"
word "stop_machine"
struct member operator "."
word "h"
greater-than operator ">"
include operator "#"
word "include"
less-than operator "<"
word "linux"
division operator "/"
word "mutex"
struct member operator "."
word "h"
greater-than operator ">"
include operator "#"
word "include"
less-than operator "<"
word "linux"
division operator "/"
word "gfp"
struct member operator "."
word "h"
greater-than operator ">"
include operator "#"
word "include"
less-than operator "<"
word "linux"
division operator "/"
word "suspend"
struct member operator "."
word "h"
greater-than operator ">"
include operator "#"
word "include"
less-than operator "<"
word "linux"
division operator "/"
word "lockdep"
struct member operator "."
word "h"
greater-than operator ">"
include operator "#"
word "include"
less-than operator "<"
word "linux"
division operator "/"
word "tick"
struct member operator "."
word "h"
greater-than operator ">"
include operator "#"
word "include"
less-than operator "<"
word "linux"
division operator "/"
word "irq"
struct member operator "."
word "h"
greater-than operator ">"
include operator "#"
word "include"
less-than operator "<"
word "trace"
division operator "/"
word "events"
division operator "/"
word "power"
struct member operator "."
word "h"
greater-than operator ">"
include operator "#"
word "include"
string literal '"smpboot.h"'
include operator "#"
word "ifdef"
word "CONFIG_SMP"
reserved word "static"
word "DEFINE_MUTEX"
opening parenthesis "("
word "cpu_add_remove_lock"
closing parenthesis ")"
end-of-statement operator ";"
word "void"
word "cpu_maps_update_begin"
opening parenthesis "("
word "void"
closing parenthesis ")"
opening brace "{"
word "mutex_lock"
opening parenthesis "("
bitwise-and operator/address operator "&"
word "cpu_add_remove_lock"
closing parenthesis ")"
end-of-statement operator ";"
closing brace "}"
word "EXPORT_SYMBOL"
opening parenthesis "("
word "cpu_notifier_register_begin"
closing parenthesis ")"
end-of-statement operator ";"
word "void"
word "cpu_maps_update_done"
opening parenthesis "("
word "void"
closing parenthesis ")"
opening brace "{"
word "mutex_unlock"
opening parenthesis "("
bitwise-and operator/address operator "&"
word "cpu_add_remove_lock"
closing parenthesis ")"
end-of-statement operator ";"
closing brace "}"
word "EXPORT_SYMBOL"
opening parenthesis "("
word "cpu_notifier_register_done"
closing parenthesis ")"
end-of-statement operator ";"
reserved word "static"
word "RAW_NOTIFIER_HEAD"
opening parenthesis "("
word "cpu_chain"
closing parenthesis ")"
end-of-statement operator ";"
reserved word "static"
reserved word "int"
word "cpu_hotplug_disabled"
end-of-statement operator ";"
include operator "#"
word "ifdef"
word "CONFIG_HOTPLUG_CPU"
reserved word "static"
reserved word "struct"
opening brace "{"
reserved word "struct"
word "task_struct"
multiplication operator/pointer operator "*"
word "active_writer"
end-of-statement operator ";"
word "wait_queue_head_t"
word "wq"
end-of-statement operator ";"
reserved word "struct"
word "mutex"
word "lock"
end-of-statement operator ";"
word "atomic_t"
word "refcount"
end-of-statement operator ";"
include operator "#"
word "ifdef"
word "CONFIG_DEBUG_LOCK_ALLOC"
reserved word "struct"
word "lockdep_map"
word "dep_map"
end-of-statement operator ";"
include operator "#"
word "endif"
closing brace "}"
word "cpu_hotplug"
assignment operator "="
opening brace "{"
struct member operator "."
word "active_writer"
assignment operator "="
word "NULL"
comma ","
struct member operator "."
word "wq"
assignment operator "="
word "__WAIT_QUEUE_HEAD_INITIALIZER"
opening parenthesis "("
word "cpu_hotplug"
struct member operator "."
word "wq"
closing parenthesis ")"
comma ","
struct member operator "."
word "lock"
assignment operator "="
word "__MUTEX_INITIALIZER"
opening parenthesis "("
word "cpu_hotplug"
struct member operator "."
word "lock"
closing parenthesis ")"
comma ","
include operator "#"
word "ifdef"
word "CONFIG_DEBUG_LOCK_ALLOC"
struct member operator "."
word "dep_map"
assignment operator "="
opening brace "{"
struct member operator "."
word "name"
assignment operator "="
string literal '"cpu_hotplug.lock"'
closing brace "}"
comma ","
include operator "#"
word "endif"
closing brace "}"
end-of-statement operator ";"
include operator "#"
word "define"
word "cpuhp_lock_acquire_read"
opening parenthesis "("
closing parenthesis ")"
word "lock_map_acquire_read"
opening parenthesis "("
bitwise-and operator/address operator "&"
word "cpu_hotplug"
struct member operator "."
word "dep_map"
closing parenthesis ")"
include operator "#"
word "define"
word "cpuhp_lock_acquire_tryread"
opening parenthesis "("
closing parenthesis ")"
invalid token "\"
word "lock_map_acquire_tryread"
opening parenthesis "("
bitwise-and operator/address operator "&"
word "cpu_hotplug"
struct member operator "."
word "dep_map"
closing parenthesis ")"
include operator "#"
word "define"
word "cpuhp_lock_acquire"
opening parenthesis "("
closing parenthesis ")"
word "lock_map_acquire"
opening parenthesis "("
bitwise-and operator/address operator "&"
word "cpu_hotplug"
struct member operator "."
word "dep_map"
closing parenthesis ")"
include operator "#"
word "define"
word "cpuhp_lock_release"
opening parenthesis "("
closing parenthesis ")"
word "lock_map_release"
opening parenthesis "("
bitwise-and operator/address operator "&"
word "cpu_hotplug"
struct member operator "."
word "dep_map"
closing parenthesis ")"
word "void"
word "get_online_cpus"
opening parenthesis "("
word "void"
closing parenthesis ")"
opening brace "{"
word "might_sleep"
opening parenthesis "("
closing parenthesis ")"
end-of-statement operator ";"
reserved word "if"
opening parenthesis "("
word "cpu_hotplug"
struct member operator "."
word "active_writer"
equality operator "=="
word "current"
closing parenthesis ")"
reserved word "return"
end-of-statement operator ";"
word "cpuhp_lock_acquire_read"
opening parenthesis "("
closing parenthesis ")"
end-of-statement operator ";"
word "mutex_lock"
opening parenthesis "("
bitwise-and operator/address operator "&"
word "cpu_hotplug"
struct member operator "."
word "lock"
closing parenthesis ")"
end-of-statement operator ";"
word "atomic_inc"
opening parenthesis "("
bitwise-and operator/address operator "&"
word "cpu_hotplug"
struct member operator "."
word "refcount"
closing parenthesis ")"
end-of-statement operator ";"
word "mutex_unlock"
opening parenthesis "("
bitwise-and operator/address operator "&"
word "cpu_hotplug"
struct member operator "."
word "lock"
closing parenthesis ")"
end-of-statement operator ";"
closing brace "}"
word "EXPORT_SYMBOL_GPL"
opening parenthesis "("
word "get_online_cpus"
closing parenthesis ")"
end-of-statement operator ";"
word "bool"
word "try_get_online_cpus"
opening parenthesis "("
word "void"
closing parenthesis ")"
opening brace "{"
reserved word "if"
opening parenthesis "("
word "cpu_hotplug"
struct member operator "."
word "active_writer"
equality operator "=="
word "current"
closing parenthesis ")"
reserved word "return"
word "true"
end-of-statement operator ";"
reserved word "if"
opening parenthesis "("
logical-not operator "!"
word "mutex_trylock"
opening parenthesis "("
bitwise-and operator/address operator "&"
word "cpu_hotplug"
struct member operator "."
word "lock"
closing parenthesis ")"
closing parenthesis ")"
reserved word "return"
word "false"
end-of-statement operator ";"
word "cpuhp_lock_acquire_tryread"
opening parenthesis "("
closing parenthesis ")"
end-of-statement operator ";"
word "atomic_inc"
opening parenthesis "("
bitwise-and operator/address operator "&"
word "cpu_hotplug"
struct member operator "."
word "refcount"
closing parenthesis ")"
end-of-statement operator ";"
word "mutex_unlock"
opening parenthesis "("
bitwise-and operator/address operator "&"
word "cpu_hotplug"
struct member operator "."
word "lock"
closing parenthesis ")"
end-of-statement operator ";"
reserved word "return"
word "true"
end-of-statement operator ";"
closing brace "}"
word "EXPORT_SYMBOL_GPL"
opening parenthesis "("
word "try_get_online_cpus"
closing parenthesis ")"
end-of-statement operator ";"
word "void"
word "put_online_cpus"
opening parenthesis "("
word "void"
closing parenthesis ")"
opening brace "{"
reserved word "int"
word "refcount"
end-of-statement operator ";"
reserved word "if"
opening parenthesis "("
word "cpu_hotplug"
struct member operator "."
word "active_writer"
equality operator "=="
word "current"
closing parenthesis ")"
reserved word "return"
end-of-statement operator ";"
word "refcount"
assignment operator "="
word "atomic_dec_return"
opening parenthesis "("
bitwise-and operator/address operator "&"
word "cpu_hotplug"
struct member operator "."
word "refcount"
closing parenthesis ")"
end-of-statement operator ";"
reserved word "if"
opening parenthesis "("
word "WARN_ON"
opening parenthesis "("
word "refcount"
less-than operator "<"
zero integer "0"
closing parenthesis ")"
closing parenthesis ")"
word "atomic_inc"
opening parenthesis "("
bitwise-and operator/address operator "&"
word "cpu_hotplug"
struct member operator "."
word "refcount"
closing parenthesis ")"
end-of-statement operator ";"
reserved word "if"
opening parenthesis "("
word "refcount"
less-than-or-equal-to operator "<="
zero integer "0"
logical-and operator "&&"
word "waitqueue_active"
opening parenthesis "("
bitwise-and operator/address operator "&"
word "cpu_hotplug"
struct member operator "."
word "wq"
closing parenthesis ")"
closing parenthesis ")"
word "wake_up"
opening parenthesis "("
bitwise-and operator/address operator "&"
word "cpu_hotplug"
struct member operator "."
word "wq"
closing parenthesis ")"
end-of-statement operator ";"
word "cpuhp_lock_release"
opening parenthesis "("
closing parenthesis ")"
end-of-statement operator ";"
closing brace "}"
word "EXPORT_SYMBOL_GPL"
opening parenthesis "("
word "put_online_cpus"
closing parenthesis ")"
end-of-statement operator ";"
word "void"
word "cpu_hotplug_begin"
opening parenthesis "("
word "void"
closing parenthesis ")"
opening brace "{"
word "DEFINE_WAIT"
opening parenthesis "("
word "wait"
closing parenthesis ")"
end-of-statement operator ";"
word "cpu_hotplug"
struct member operator "."
word "active_writer"
assignment operator "="
word "current"
end-of-statement operator ";"
word "cpuhp_lock_acquire"
opening parenthesis "("
closing parenthesis ")"
end-of-statement operator ";"
reserved word "for"
opening parenthesis "("
end-of-statement operator ";"
end-of-statement operator ";"
closing parenthesis ")"
opening brace "{"
word "mutex_lock"
opening parenthesis "("
bitwise-and operator/address operator "&"
word "cpu_hotplug"
struct member operator "."
word "lock"
closing parenthesis ")"
end-of-statement operator ";"
word "prepare_to_wait"
opening parenthesis "("
bitwise-and operator/address operator "&"
word "cpu_hotplug"
struct member operator "."
word "wq"
comma ","
bitwise-and operator/address operator "&"
word "wait"
comma ","
word "TASK_UNINTERRUPTIBLE"
closing parenthesis ")"
end-of-statement operator ";"
reserved word "if"
opening parenthesis "("
word "likely"
opening parenthesis "("
logical-not operator "!"
word "atomic_read"
opening parenthesis "("
bitwise-and operator/address operator "&"
word "cpu_hotplug"
struct member operator "."
word "refcount"
closing parenthesis ")"
closing parenthesis ")"
closing parenthesis ")"
reserved word "break"
end-of-statement operator ";"
word "mutex_unlock"
opening parenthesis "("
bitwise-and operator/address operator "&"
word "cpu_hotplug"
struct member operator "."
word "lock"
closing parenthesis ")"
end-of-statement operator ";"
word "schedule"
opening parenthesis "("
closing parenthesis ")"
end-of-statement operator ";"
closing brace "}"
word "finish_wait"
opening parenthesis "("
bitwise-and operator/address operator "&"
word "cpu_hotplug"
struct member operator "."
word "wq"
comma ","
bitwise-and operator/address operator "&"
word "wait"
closing parenthesis ")"
end-of-statement operator ";"
closing brace "}"
word "void"
word "cpu_hotplug_done"
opening parenthesis "("
word "void"
closing parenthesis ")"
opening brace "{"
word "cpu_hotplug"
struct member operator "."
word "active_writer"
assignment operator "="
word "NULL"
end-of-statement operator ";"
word "mutex_unlock"
opening parenthesis "("
bitwise-and operator/address operator "&"
word "cpu_hotplug"
struct member operator "."
word "lock"
closing parenthesis ")"
end-of-statement operator ";"
word "cpuhp_lock_release"
opening parenthesis "("
closing parenthesis ")"
end-of-statement operator ";"
closing brace "}"
word "void"
word "cpu_hotplug_disable"
opening parenthesis "("
word "void"
closing parenthesis ")"
opening brace "{"
word "cpu_maps_update_begin"
opening parenthesis "("
closing parenthesis ")"
end-of-statement operator ";"
word "cpu_hotplug_disabled"
increment operator "++"
end-of-statement operator ";"
word "cpu_maps_update_done"
opening parenthesis "("
closing parenthesis ")"
end-of-statement operator ";"
closing brace "}"
word "EXPORT_SYMBOL_GPL"
opening parenthesis "("
word "cpu_hotplug_disable"
closing parenthesis ")"
end-of-statement operator ";"
word "void"
word "cpu_hotplug_enable"
opening parenthesis "("
word "void"
closing parenthesis ")"
opening brace "{"
word "cpu_maps_update_begin"
opening parenthesis "("
closing parenthesis ")"
end-of-statement operator ";"
word "WARN_ON"
opening parenthesis "("
decrement operator "--"
word "cpu_hotplug_disabled"
less-than operator "<"
zero integer "0"
closing parenthesis ")"
end-of-statement operator ";"
word "cpu_maps_update_done"
opening parenthesis "("
closing parenthesis ")"
end-of-statement operator ";"
closing brace "}"
word "EXPORT_SYMBOL_GPL"
opening parenthesis "("
word "cpu_hotplug_enable"
closing parenthesis ")"
end-of-statement operator ";"
include operator "#"
word "endif"
reserved word "int"
word "register_cpu_notifier"
opening parenthesis "("
reserved word "struct"
word "notifier_block"
multiplication operator/pointer operator "*"
word "nb"
closing parenthesis ")"
opening brace "{"
reserved word "int"
word "ret"
end-of-statement operator ";"
word "cpu_maps_update_begin"
opening parenthesis "("
closing parenthesis ")"
end-of-statement operator ";"
word "ret"
assignment operator "="
word "raw_notifier_chain_register"
opening parenthesis "("
bitwise-and operator/address operator "&"
word "cpu_chain"
comma ","
word "nb"
closing parenthesis ")"
end-of-statement operator ";"
word "cpu_maps_update_done"
opening parenthesis "("
closing parenthesis ")"
end-of-statement operator ";"
reserved word "return"
word "ret"
end-of-statement operator ";"
closing brace "}"
reserved word "int"
word "__register_cpu_notifier"
opening parenthesis "("
reserved word "struct"
word "notifier_block"
multiplication operator/pointer operator "*"
word "nb"
closing parenthesis ")"
opening brace "{"
reserved word "return"
word "raw_notifier_chain_register"
opening parenthesis "("
bitwise-and operator/address operator "&"
word "cpu_chain"
comma ","
word "nb"
closing parenthesis ")"
end-of-statement operator ";"
closing brace "}"
reserved word "static"
reserved word "int"
word "__cpu_notify"
opening parenthesis "("
word "unsigned"
reserved word "long"
word "val"
comma ","
word "void"
multiplication operator/pointer operator "*"
word "v"
comma ","
reserved word "int"
word "nr_to_call"
comma ","
reserved word "int"
multiplication operator/pointer operator "*"
word "nr_calls"
closing parenthesis ")"
opening brace "{"
reserved word "int"
word "ret"
end-of-statement operator ";"
word "ret"
assignment operator "="
word "__raw_notifier_call_chain"
opening parenthesis "("
bitwise-and operator/address operator "&"
word "cpu_chain"
comma ","
word "val"
comma ","
word "v"
comma ","
word "nr_to_call"
comma ","
word "nr_calls"
closing parenthesis ")"
end-of-statement operator ";"
reserved word "return"
word "notifier_to_errno"
opening parenthesis "("
word "ret"
closing parenthesis ")"
end-of-statement operator ";"
closing brace "}"
reserved word "static"
reserved word "int"
word "cpu_notify"
opening parenthesis "("
word "unsigned"
reserved word "long"
word "val"
comma ","
word "void"
multiplication operator/pointer operator "*"
word "v"
closing parenthesis ")"
opening brace "{"
reserved word "return"
word "__cpu_notify"
opening parenthesis "("
word "val"
comma ","
word "v"
comma ","
subtraction operator "-"
decimal integer "1"
comma ","
word "NULL"
closing parenthesis ")"
end-of-statement operator ";"
closing brace "}"
include operator "#"
word "ifdef"
word "CONFIG_HOTPLUG_CPU"
reserved word "static"
word "void"
word "cpu_notify_nofail"
opening parenthesis "("
word "unsigned"
reserved word "long"
word "val"
comma ","
word "void"
multiplication operator/pointer operator "*"
word "v"
closing parenthesis ")"
opening brace "{"
word "BUG_ON"
opening parenthesis "("
word "cpu_notify"
opening parenthesis "("
word "val"
comma ","
word "v"
closing parenthesis ")"
closing parenthesis ")"
end-of-statement operator ";"
closing brace "}"
word "EXPORT_SYMBOL"
opening parenthesis "("
word "register_cpu_notifier"
closing parenthesis ")"
end-of-statement operator ";"
word "EXPORT_SYMBOL"
opening parenthesis "("
word "__register_cpu_notifier"
closing parenthesis ")"
end-of-statement operator ";"
word "void"
word "unregister_cpu_notifier"
opening parenthesis "("
reserved word "struct"
word "notifier_block"
multiplication operator/pointer operator "*"
word "nb"
closing parenthesis ")"
opening brace "{"
word "cpu_maps_update_begin"
opening parenthesis "("
closing parenthesis ")"
end-of-statement operator ";"
word "raw_notifier_chain_unregister"
opening parenthesis "("
bitwise-and operator/address operator "&"
word "cpu_chain"
comma ","
word "nb"
closing parenthesis ")"
end-of-statement operator ";"
word "cpu_maps_update_done"
opening parenthesis "("
closing parenthesis ")"
end-of-statement operator ";"
closing brace "}"
word "EXPORT_SYMBOL"
opening parenthesis "("
word "unregister_cpu_notifier"
closing parenthesis ")"
end-of-statement operator ";"
word "void"
word "__unregister_cpu_notifier"
opening parenthesis "("
reserved word "struct"
word "notifier_block"
multiplication operator/pointer operator "*"
word "nb"
closing parenthesis ")"
opening brace "{"
word "raw_notifier_chain_unregister"
opening parenthesis "("
bitwise-and operator/address operator "&"
word "cpu_chain"
comma ","
word "nb"
closing parenthesis ")"
end-of-statement operator ";"
closing brace "}"
word "EXPORT_SYMBOL"
opening parenthesis "("
word "__unregister_cpu_notifier"
closing parenthesis ")"
end-of-statement operator ";"
word "void"
word "clear_tasks_mm_cpumask"
opening parenthesis "("
reserved word "int"
word "cpu"
closing parenthesis ")"
opening brace "{"
reserved word "struct"
word "task_struct"
multiplication operator/pointer operator "*"
word "p"
end-of-statement operator ";"
word "WARN_ON"
opening parenthesis "("
word "cpu_online"
opening parenthesis "("
word "cpu"
closing parenthesis ")"
closing parenthesis ")"
end-of-statement operator ";"
word "rcu_read_lock"
opening parenthesis "("
closing parenthesis ")"
end-of-statement operator ";"
word "for_each_process"
opening parenthesis "("
word "p"
closing parenthesis ")"
opening brace "{"
reserved word "struct"
word "task_struct"
multiplication operator/pointer operator "*"
word "t"
end-of-statement operator ";"
word "t"
assignment operator "="
word "find_lock_task_mm"
opening parenthesis "("
word "p"
closing parenthesis ")"
end-of-statement operator ";"
reserved word "if"
opening parenthesis "("
logical-not operator "!"
word "t"
closing parenthesis ")"
reserved word "continue"
end-of-statement operator ";"
word "cpumask_clear_cpu"
opening parenthesis "("
word "cpu"
comma ","
word "mm_cpumask"
opening parenthesis "("
word "t"
struct pointer operator "->"
word "mm"
closing parenthesis ")"
closing parenthesis ")"
end-of-statement operator ";"
word "task_unlock"
opening parenthesis "("
word "t"
closing parenthesis ")"
end-of-statement operator ";"
closing brace "}"
word "rcu_read_unlock"
opening parenthesis "("
closing parenthesis ")"
end-of-statement operator ";"
closing brace "}"
reserved word "static"
word "inline"
word "void"
word "check_for_tasks"
opening parenthesis "("
reserved word "int"
word "dead_cpu"
closing parenthesis ")"
opening brace "{"
reserved word "struct"
word "task_struct"
multiplication operator/pointer operator "*"
word "g"
comma ","
multiplication operator/pointer operator "*"
word "p"
end-of-statement operator ";"
word "read_lock_irq"
opening parenthesis "("
bitwise-and operator/address operator "&"
word "tasklist_lock"
closing parenthesis ")"
end-of-statement operator ";"
word "do_each_thread"
opening parenthesis "("
word "g"
comma ","
word "p"
closing parenthesis ")"
opening brace "{"
reserved word "if"
opening parenthesis "("
logical-not operator "!"
word "p"
struct pointer operator "->"
word "on_rq"
closing parenthesis ")"
reserved word "continue"
end-of-statement operator ";"
word "rmb"
opening parenthesis "("
closing parenthesis ")"
end-of-statement operator ";"
reserved word "if"
opening parenthesis "("
word "task_cpu"
opening parenthesis "("
word "p"
closing parenthesis ")"
not-equals operator "!="
word "dead_cpu"
closing parenthesis ")"
reserved word "continue"
end-of-statement operator ";"
word "pr_warn"
opening parenthesis "("
string literal '"Task %s (pid=%d) is on cpu %d (state=%ld, flags=%x)\n"'
comma ","
word "p"
struct pointer operator "->"
word "comm"
comma ","
word "task_pid_nr"
opening parenthesis "("
word "p"
closing parenthesis ")"
comma ","
word "dead_cpu"
comma ","
word "p"
struct pointer operator "->"
word "state"
comma ","
word "p"
struct pointer operator "->"
word "flags"
closing parenthesis ")"
end-of-statement operator ";"
closing brace "}"
word "while_each_thread"
opening parenthesis "("
word "g"
comma ","
word "p"
closing parenthesis ")"
end-of-statement operator ";"
word "read_unlock_irq"
opening parenthesis "("
bitwise-and operator/address operator "&"
word "tasklist_lock"
closing parenthesis ")"
end-of-statement operator ";"
closing brace "}"
reserved word "struct"
word "take_cpu_down_param"
opening brace "{"
word "unsigned"
reserved word "long"
word "mod"
end-of-statement operator ";"
word "void"
multiplication operator/pointer operator "*"
word "hcpu"
end-of-statement operator ";"
closing brace "}"
end-of-statement operator ";"
reserved word "static"
reserved word "int"
word "take_cpu_down"
opening parenthesis "("
word "void"
multiplication operator/pointer operator "*"
word "_param"
closing parenthesis ")"
opening brace "{"
reserved word "struct"
word "take_cpu_down_param"
multiplication operator/pointer operator "*"
word "param"
assignment operator "="
word "_param"
end-of-statement operator ";"
reserved word "int"
word "err"
end-of-statement operator ";"
word "err"
assignment operator "="
word "__cpu_disable"
opening parenthesis "("
closing parenthesis ")"
end-of-statement operator ";"
reserved word "if"
opening parenthesis "("
word "err"
less-than operator "<"
zero integer "0"
closing parenthesis ")"
reserved word "return"
word "err"
end-of-statement operator ";"
word "cpu_notify"
opening parenthesis "("
word "CPU_DYING"
bitwise-or operator "|"
word "param"
struct pointer operator "->"
word "mod"
comma ","
word "param"
struct pointer operator "->"
word "hcpu"
closing parenthesis ")"
end-of-statement operator ";"
word "tick_handover_do_timer"
opening parenthesis "("
closing parenthesis ")"
end-of-statement operator ";"
word "kthread_park"
opening parenthesis "("
word "current"
closing parenthesis ")"
end-of-statement operator ";"
reserved word "return"
zero integer "0"
end-of-statement operator ";"
closing brace "}"
reserved word "static"
reserved word "int"
word "_cpu_down"
opening parenthesis "("
word "unsigned"
reserved word "int"
word "cpu"
comma ","
reserved word "int"
word "tasks_frozen"
closing parenthesis ")"
opening brace "{"
reserved word "int"
word "err"
comma ","
word "nr_calls"
assignment operator "="
zero integer "0"
end-of-statement operator ";"
word "void"
multiplication operator/pointer operator "*"
word "hcpu"
assignment operator "="
opening parenthesis "("
word "void"
multiplication operator/pointer operator "*"
closing parenthesis ")"
opening parenthesis "("
reserved word "long"
closing parenthesis ")"
word "cpu"
end-of-statement operator ";"
word "unsigned"
reserved word "long"
word "mod"
assignment operator "="
word "tasks_frozen"
ternary question mark operator "?"
word "CPU_TASKS_FROZEN"
ternary colon operator ":"
zero integer "0"
end-of-statement operator ";"
reserved word "struct"
word "take_cpu_down_param"
word "tcd_param"
assignment operator "="
opening brace "{"
struct member operator "."
word "mod"
assignment operator "="
word "mod"
comma ","
struct member operator "."
word "hcpu"
assignment operator "="
word "hcpu"
comma ","
closing brace "}"
end-of-statement operator ";"
reserved word "if"
opening parenthesis "("
word "num_online_cpus"
opening parenthesis "("
closing parenthesis ")"
equality operator "=="
decimal integer "1"
closing parenthesis ")"
reserved word "return"
subtraction operator "-"
word "EBUSY"
end-of-statement operator ";"
reserved word "if"
opening parenthesis "("
logical-not operator "!"
word "cpu_online"
opening parenthesis "("
word "cpu"
closing parenthesis ")"
closing parenthesis ")"
reserved word "return"
subtraction operator "-"
word "EINVAL"
end-of-statement operator ";"
word "cpu_hotplug_begin"
opening parenthesis "("
closing parenthesis ")"
end-of-statement operator ";"
word "err"
assignment operator "="
word "__cpu_notify"
opening parenthesis "("
word "CPU_DOWN_PREPARE"
bitwise-or operator "|"
word "mod"
comma ","
word "hcpu"
comma ","
subtraction operator "-"
decimal integer "1"
comma ","
bitwise-and operator/address operator "&"
word "nr_calls"
closing parenthesis ")"
end-of-statement operator ";"
reserved word "if"
opening parenthesis "("
word "err"
closing parenthesis ")"
opening brace "{"
word "nr_calls"
decrement operator "--"
end-of-statement operator ";"
word "__cpu_notify"
opening parenthesis "("
word "CPU_DOWN_FAILED"
bitwise-or operator "|"
word "mod"
comma ","
word "hcpu"
comma ","
word "nr_calls"
comma ","
word "NULL"
closing parenthesis ")"
end-of-statement operator ";"
word "pr_warn"
opening parenthesis "("
string literal '"%s: attempt to take down CPU %u failed\n"'
comma ","
word "__func__"
comma ","
word "cpu"
closing parenthesis ")"
end-of-statement operator ";"
reserved word "goto"
word "out_release"
end-of-statement operator ";"
closing brace "}"
reserved word "if"
opening parenthesis "("
word "IS_ENABLED"
opening parenthesis "("
word "CONFIG_PREEMPT"
closing parenthesis ")"
closing parenthesis ")"
word "synchronize_rcu_mult"
opening parenthesis "("
word "call_rcu"
comma ","
word "call_rcu_sched"
closing parenthesis ")"
end-of-statement operator ";"
reserved word "else"
word "synchronize_rcu"
opening parenthesis "("
closing parenthesis ")"
end-of-statement operator ";"
word "smpboot_park_threads"
opening parenthesis "("
word "cpu"
closing parenthesis ")"
end-of-statement operator ";"
word "irq_lock_sparse"
opening parenthesis "("
closing parenthesis ")"
end-of-statement operator ";"
word "err"
assignment operator "="
word "stop_machine"
opening parenthesis "("
word "take_cpu_down"
comma ","
bitwise-and operator/address operator "&"
word "tcd_param"
comma ","
word "cpumask_of"
opening parenthesis "("
word "cpu"
closing parenthesis ")"
closing parenthesis ")"
end-of-statement operator ";"
reserved word "if"
opening parenthesis "("
word "err"
closing parenthesis ")"
opening brace "{"
word "cpu_notify_nofail"
opening parenthesis "("
word "CPU_DOWN_FAILED"
bitwise-or operator "|"
word "mod"
comma ","
word "hcpu"
closing parenthesis ")"
end-of-statement operator ";"
word "irq_unlock_sparse"
opening parenthesis "("
closing parenthesis ")"
end-of-statement operator ";"
reserved word "goto"
word "out_release"
end-of-statement operator ";"
closing brace "}"
word "BUG_ON"
opening parenthesis "("
word "cpu_online"
opening parenthesis "("
word "cpu"
closing parenthesis ")"
closing parenthesis ")"
end-of-statement operator ";"
word "while"
opening parenthesis "("
logical-not operator "!"
word "per_cpu"
opening parenthesis "("
word "cpu_dead_idle"
comma ","
word "cpu"
closing parenthesis ")"
closing parenthesis ")"
word "cpu_relax"
opening parenthesis "("
closing parenthesis ")"
end-of-statement operator ";"
word "smp_mb"
opening parenthesis "("
closing parenthesis ")"
end-of-statement operator ";"
word "per_cpu"
opening parenthesis "("
word "cpu_dead_idle"
comma ","
word "cpu"
closing parenthesis ")"
assignment operator "="
word "false"
end-of-statement operator ";"
word "irq_unlock_sparse"
opening parenthesis "("
closing parenthesis ")"
end-of-statement operator ";"
word "hotplug_cpu__broadcast_tick_pull"
opening parenthesis "("
word "cpu"
closing parenthesis ")"
end-of-statement operator ";"
word "__cpu_die"
opening parenthesis "("
word "cpu"
closing parenthesis ")"
end-of-statement operator ";"
word "tick_cleanup_dead_cpu"
opening parenthesis "("
word "cpu"
closing parenthesis ")"
end-of-statement operator ";"
word "cpu_notify_nofail"
opening parenthesis "("
word "CPU_DEAD"
bitwise-or operator "|"
word "mod"
comma ","
word "hcpu"
closing parenthesis ")"
end-of-statement operator ";"
word "check_for_tasks"
opening parenthesis "("
word "cpu"
closing parenthesis ")"
end-of-statement operator ";"
word "out_release"
ternary colon operator ":"
word "cpu_hotplug_done"
opening parenthesis "("
closing parenthesis ")"
end-of-statement operator ";"
reserved word "if"
opening parenthesis "("
logical-not operator "!"
word "err"
closing parenthesis ")"
word "cpu_notify_nofail"
opening parenthesis "("
word "CPU_POST_DEAD"
bitwise-or operator "|"
word "mod"
comma ","
word "hcpu"
closing parenthesis ")"
end-of-statement operator ";"
reserved word "return"
word "err"
end-of-statement operator ";"
closing brace "}"
reserved word "int"
word "cpu_down"
opening parenthesis "("
word "unsigned"
reserved word "int"
word "cpu"
closing parenthesis ")"
opening brace "{"
reserved word "int"
word "err"
end-of-statement operator ";"
word "cpu_maps_update_begin"
opening parenthesis "("
closing parenthesis ")"
end-of-statement operator ";"
reserved word "if"
opening parenthesis "("
word "cpu_hotplug_disabled"
closing parenthesis ")"
opening brace "{"
word "err"
assignment operator "="
subtraction operator "-"
word "EBUSY"
end-of-statement operator ";"
reserved word "goto"
word "out"
end-of-statement operator ";"
closing brace "}"
word "err"
assignment operator "="
word "_cpu_down"
opening parenthesis "("
word "cpu"
comma ","
zero integer "0"
closing parenthesis ")"
end-of-statement operator ";"
word "out"
ternary colon operator ":"
word "cpu_maps_update_done"
opening parenthesis "("
closing parenthesis ")"
end-of-statement operator ";"
reserved word "return"
word "err"
end-of-statement operator ";"
closing brace "}"
word "EXPORT_SYMBOL"
opening parenthesis "("
word "cpu_down"
closing parenthesis ")"
end-of-statement operator ";"
include operator "#"
word "endif"
reserved word "static"
reserved word "int"
word "smpboot_thread_call"
opening parenthesis "("
reserved word "struct"
word "notifier_block"
multiplication operator/pointer operator "*"
word "nfb"
comma ","
word "unsigned"
reserved word "long"
word "action"
comma ","
word "void"
multiplication operator/pointer operator "*"
word "hcpu"
closing parenthesis ")"
opening brace "{"
reserved word "int"
word "cpu"
assignment operator "="
opening parenthesis "("
reserved word "long"
closing parenthesis ")"
word "hcpu"
end-of-statement operator ";"
reserved word "switch"
opening parenthesis "("
word "action"
bitwise-and operator/address operator "&"
bitwise-not operator "~"
word "CPU_TASKS_FROZEN"
closing parenthesis ")"
opening brace "{"
reserved word "case"
word "CPU_DOWN_FAILED"
ternary colon operator ":"
reserved word "case"
word "CPU_ONLINE"
ternary colon operator ":"
word "smpboot_unpark_threads"
opening parenthesis "("
word "cpu"
closing parenthesis ")"
end-of-statement operator ";"
reserved word "break"
end-of-statement operator ";"
reserved word "default"
ternary colon operator ":"
reserved word "break"
end-of-statement operator ";"
closing brace "}"
reserved word "return"
word "NOTIFY_OK"
end-of-statement operator ";"
closing brace "}"
reserved word "static"
reserved word "struct"
word "notifier_block"
word "smpboot_thread_notifier"
assignment operator "="
opening brace "{"
struct member operator "."
word "notifier_call"
assignment operator "="
word "smpboot_thread_call"
comma ","
struct member operator "."
word "priority"
assignment operator "="
word "CPU_PRI_SMPBOOT"
comma ","
closing brace "}"
end-of-statement operator ";"
word "void"
word "smpboot_thread_init"
opening parenthesis "("
word "void"
closing parenthesis ")"
opening brace "{"
word "register_cpu_notifier"
opening parenthesis "("
bitwise-and operator/address operator "&"
word "smpboot_thread_notifier"
closing parenthesis ")"
end-of-statement operator ";"
closing brace "}"
reserved word "static"
reserved word "int"
word "_cpu_up"
opening parenthesis "("
word "unsigned"
reserved word "int"
word "cpu"
comma ","
reserved word "int"
word "tasks_frozen"
closing parenthesis ")"
opening brace "{"
reserved word "int"
word "ret"
comma ","
word "nr_calls"
assignment operator "="
zero integer "0"
end-of-statement operator ";"
word "void"
multiplication operator/pointer operator "*"
word "hcpu"
assignment operator "="
opening parenthesis "("
word "void"
multiplication operator/pointer operator "*"
closing parenthesis ")"
opening parenthesis "("
reserved word "long"
closing parenthesis ")"
word "cpu"
end-of-statement operator ";"
word "unsigned"
reserved word "long"
word "mod"
assignment operator "="
word "tasks_frozen"
ternary question mark operator "?"
word "CPU_TASKS_FROZEN"
ternary colon operator ":"
zero integer "0"
end-of-statement operator ";"
reserved word "struct"
word "task_struct"
multiplication operator/pointer operator "*"
word "idle"
end-of-statement operator ";"
word "cpu_hotplug_begin"
opening parenthesis "("
closing parenthesis ")"
end-of-statement operator ";"
reserved word "if"
opening parenthesis "("
word "cpu_online"
opening parenthesis "("
word "cpu"
closing parenthesis ")"
logical-or operator "||"
logical-not operator "!"
word "cpu_present"
opening parenthesis "("
word "cpu"
closing parenthesis ")"
closing parenthesis ")"
opening brace "{"
word "ret"
assignment operator "="
subtraction operator "-"
word "EINVAL"
end-of-statement operator ";"
reserved word "goto"
word "out"
end-of-statement operator ";"
closing brace "}"
word "idle"
assignment operator "="
word "idle_thread_get"
opening parenthesis "("
word "cpu"
closing parenthesis ")"
end-of-statement operator ";"
reserved word "if"
opening parenthesis "("
word "IS_ERR"
opening parenthesis "("
word "idle"
closing parenthesis ")"
closing parenthesis ")"
opening brace "{"
word "ret"
assignment operator "="
word "PTR_ERR"
opening parenthesis "("
word "idle"
closing parenthesis ")"
end-of-statement operator ";"
reserved word "goto"
word "out"
end-of-statement operator ";"
closing brace "}"
word "ret"
assignment operator "="
word "smpboot_create_threads"
opening parenthesis "("
word "cpu"
closing parenthesis ")"
end-of-statement operator ";"
reserved word "if"
opening parenthesis "("
word "ret"
closing parenthesis ")"
reserved word "goto"
word "out"
end-of-statement operator ";"
word "ret"
assignment operator "="
word "__cpu_notify"
opening parenthesis "("
word "CPU_UP_PREPARE"
bitwise-or operator "|"
word "mod"
comma ","
word "hcpu"
comma ","
subtraction operator "-"
decimal integer "1"
comma ","
bitwise-and operator/address operator "&"
word "nr_calls"
closing parenthesis ")"
end-of-statement operator ";"
reserved word "if"
opening parenthesis "("
word "ret"
closing parenthesis ")"
opening brace "{"
word "nr_calls"
decrement operator "--"
end-of-statement operator ";"
word "pr_warn"
opening parenthesis "("
string literal '"%s: attempt to bring up CPU %u failed\n"'
comma ","
word "__func__"
comma ","
word "cpu"
closing parenthesis ")"
end-of-statement operator ";"
reserved word "goto"
word "out_notify"
end-of-statement operator ";"
closing brace "}"
word "ret"
assignment operator "="
word "__cpu_up"
opening parenthesis "("
word "cpu"
comma ","
word "idle"
closing parenthesis ")"
end-of-statement operator ";"
reserved word "if"
opening parenthesis "("
word "ret"
not-equals operator "!="
zero integer "0"
closing parenthesis ")"
reserved word "goto"
word "out_notify"
end-of-statement operator ";"
word "BUG_ON"
opening parenthesis "("
logical-not operator "!"
word "cpu_online"
opening parenthesis "("
word "cpu"
closing parenthesis ")"
closing parenthesis ")"
end-of-statement operator ";"
word "cpu_notify"
opening parenthesis "("
word "CPU_ONLINE"
bitwise-or operator "|"
word "mod"
comma ","
word "hcpu"
closing parenthesis ")"
end-of-statement operator ";"
word "out_notify"
ternary colon operator ":"
reserved word "if"
opening parenthesis "("
word "ret"
not-equals operator "!="
zero integer "0"
closing parenthesis ")"
word "__cpu_notify"
opening parenthesis "("
word "CPU_UP_CANCELED"
bitwise-or operator "|"
word "mod"
comma ","
word "hcpu"
comma ","
word "nr_calls"
comma ","
word "NULL"
closing parenthesis ")"
end-of-statement operator ";"
word "out"
ternary colon operator ":"
word "cpu_hotplug_done"
opening parenthesis "("
closing parenthesis ")"
end-of-statement operator ";"
reserved word "return"
word "ret"
end-of-statement operator ";"
closing brace "}"
reserved word "int"
word "cpu_up"
opening parenthesis "("
word "unsigned"
reserved word "int"
word "cpu"
closing parenthesis ")"
opening brace "{"
reserved word "int"
word "err"
assignment operator "="
zero integer "0"
end-of-statement operator ";"
reserved word "if"
opening parenthesis "("
logical-not operator "!"
word "cpu_possible"
opening parenthesis "("
word "cpu"
closing parenthesis ")"
closing parenthesis ")"
opening brace "{"
word "pr_err"
opening parenthesis "("
string literal '"can't online cpu %d because it is not configured as may-hotadd at boot time\n"'
comma ","
word "cpu"
closing parenthesis ")"
end-of-statement operator ";"
include operator "#"
reserved word "if"
word "defined"
opening parenthesis "("
word "CONFIG_IA64"
closing parenthesis ")"
word "pr_err"
opening parenthesis "("
string literal '"please check additional_cpus= boot parameter\n"'
closing parenthesis ")"
end-of-statement operator ";"
include operator "#"
word "endif"
reserved word "return"
subtraction operator "-"
word "EINVAL"
end-of-statement operator ";"
closing brace "}"
word "err"
assignment operator "="
word "try_online_node"
opening parenthesis "("
word "cpu_to_node"
opening parenthesis "("
word "cpu"
closing parenthesis ")"
closing parenthesis ")"
end-of-statement operator ";"
reserved word "if"
opening parenthesis "("
word "err"
closing parenthesis ")"
reserved word "return"
word "err"
end-of-statement operator ";"
word "cpu_maps_update_begin"
opening parenthesis "("
closing parenthesis ")"
end-of-statement operator ";"
reserved word "if"
opening parenthesis "("
word "cpu_hotplug_disabled"
closing parenthesis ")"
opening brace "{"
word "err"
assignment operator "="
subtraction operator "-"
word "EBUSY"
end-of-statement operator ";"
reserved word "goto"
word "out"
end-of-statement operator ";"
closing brace "}"
word "err"
assignment operator "="
word "_cpu_up"
opening parenthesis "("
word "cpu"
comma ","
zero integer "0"
closing parenthesis ")"
end-of-statement operator ";"
word "out"
ternary colon operator ":"
word "cpu_maps_update_done"
opening parenthesis "("
closing parenthesis ")"
end-of-statement operator ";"
reserved word "return"
word "err"
end-of-statement operator ";"
closing brace "}"
word "EXPORT_SYMBOL_GPL"
opening parenthesis "("
word "cpu_up"
closing parenthesis ")"
end-of-statement operator ";"
include operator "#"
word "ifdef"
word "CONFIG_PM_SLEEP_SMP"
reserved word "static"
word "cpumask_var_t"
word "frozen_cpus"
end-of-statement operator ";"
reserved word "int"
word "disable_nonboot_cpus"
opening parenthesis "("
word "void"
closing parenthesis ")"
opening brace "{"
reserved word "int"
word "cpu"
comma ","
word "first_cpu"
comma ","
word "error"
assignment operator "="
zero integer "0"
end-of-statement operator ";"
word "cpu_maps_update_begin"
opening parenthesis "("
closing parenthesis ")"
end-of-statement operator ";"
word "first_cpu"
assignment operator "="
word "cpumask_first"
opening parenthesis "("
word "cpu_online_mask"
closing parenthesis ")"
end-of-statement operator ";"
word "cpumask_clear"
opening parenthesis "("
word "frozen_cpus"
closing parenthesis ")"
end-of-statement operator ";"
word "pr_info"
opening parenthesis "("
string literal '"Disabling non-boot CPUs ...\n"'
closing parenthesis ")"
end-of-statement operator ";"
word "for_each_online_cpu"
opening parenthesis "("
word "cpu"
closing parenthesis ")"
opening brace "{"
reserved word "if"
opening parenthesis "("
word "cpu"
equality operator "=="
word "first_cpu"
closing parenthesis ")"
reserved word "continue"
end-of-statement operator ";"
word "trace_suspend_resume"
opening parenthesis "("
word "TPS"
opening parenthesis "("
string literal '"CPU_OFF"'
closing parenthesis ")"
comma ","
word "cpu"
comma ","
word "true"
closing parenthesis ")"
end-of-statement operator ";"
word "error"
assignment operator "="
word "_cpu_down"
opening parenthesis "("
word "cpu"
comma ","
decimal integer "1"
closing parenthesis ")"
end-of-statement operator ";"
word "trace_suspend_resume"
opening parenthesis "("
word "TPS"
opening parenthesis "("
string literal '"CPU_OFF"'
closing parenthesis ")"
comma ","
word "cpu"
comma ","
word "false"
closing parenthesis ")"
end-of-statement operator ";"
reserved word "if"
opening parenthesis "("
logical-not operator "!"
word "error"
closing parenthesis ")"
word "cpumask_set_cpu"
opening parenthesis "("
word "cpu"
comma ","
word "frozen_cpus"
closing parenthesis ")"
end-of-statement operator ";"
reserved word "else"
opening brace "{"
word "pr_err"
opening parenthesis "("
string literal '"Error taking CPU%d down: %d\n"'
comma ","
word "cpu"
comma ","
word "error"
closing parenthesis ")"
end-of-statement operator ";"
reserved word "break"
end-of-statement operator ";"
closing brace "}"
closing brace "}"
reserved word "if"
opening parenthesis "("
logical-not operator "!"
word "error"
closing parenthesis ")"
word "BUG_ON"
opening parenthesis "("
word "num_online_cpus"
opening parenthesis "("
closing parenthesis ")"
greater-than operator ">"
decimal integer "1"
closing parenthesis ")"
end-of-statement operator ";"
reserved word "else"
word "pr_err"
opening parenthesis "("
string literal '"Non-boot CPUs are not disabled\n"'
closing parenthesis ")"
end-of-statement operator ";"
word "cpu_hotplug_disabled"
increment operator "++"
end-of-statement operator ";"
word "cpu_maps_update_done"
opening parenthesis "("
closing parenthesis ")"
end-of-statement operator ";"
reserved word "return"
word "error"
end-of-statement operator ";"
closing brace "}"
word "void"
word "__weak"
word "arch_enable_nonboot_cpus_begin"
opening parenthesis "("
word "void"
closing parenthesis ")"
opening brace "{"
closing brace "}"
word "void"
word "__weak"
word "arch_enable_nonboot_cpus_end"
opening parenthesis "("
word "void"
closing parenthesis ")"
opening brace "{"
closing brace "}"
word "void"
word "enable_nonboot_cpus"
opening parenthesis "("
word "void"
closing parenthesis ")"
opening brace "{"
reserved word "int"
word "cpu"
comma ","
word "error"
end-of-statement operator ";"
word "cpu_maps_update_begin"
opening parenthesis "("
closing parenthesis ")"
end-of-statement operator ";"
word "WARN_ON"
opening parenthesis "("
decrement operator "--"
word "cpu_hotplug_disabled"
less-than operator "<"
zero integer "0"
closing parenthesis ")"
end-of-statement operator ";"
reserved word "if"
opening parenthesis "("
word "cpumask_empty"
opening parenthesis "("
word "frozen_cpus"
closing parenthesis ")"
closing parenthesis ")"
reserved word "goto"
word "out"
end-of-statement operator ";"
word "pr_info"
opening parenthesis "("
string literal '"Enabling non-boot CPUs ...\n"'
closing parenthesis ")"
end-of-statement operator ";"
word "arch_enable_nonboot_cpus_begin"
opening parenthesis "("
closing parenthesis ")"
end-of-statement operator ";"
word "for_each_cpu"
opening parenthesis "("
word "cpu"
comma ","
word "frozen_cpus"
closing parenthesis ")"
opening brace "{"
word "trace_suspend_resume"
opening parenthesis "("
word "TPS"
opening parenthesis "("
string literal '"CPU_ON"'
closing parenthesis ")"
comma ","
word "cpu"
comma ","
word "true"
closing parenthesis ")"
end-of-statement operator ";"
word "error"
assignment operator "="
word "_cpu_up"
opening parenthesis "("
word "cpu"
comma ","
decimal integer "1"
closing parenthesis ")"
end-of-statement operator ";"
word "trace_suspend_resume"
opening parenthesis "("
word "TPS"
opening parenthesis "("
string literal '"CPU_ON"'
closing parenthesis ")"
comma ","
word "cpu"
comma ","
word "false"
closing parenthesis ")"
end-of-statement operator ";"
reserved word "if"
opening parenthesis "("
logical-not operator "!"
word "error"
closing parenthesis ")"
opening brace "{"
word "pr_info"
opening parenthesis "("
string literal '"CPU%d is up\n"'
comma ","
word "cpu"
closing parenthesis ")"
end-of-statement operator ";"
reserved word "continue"
end-of-statement operator ";"
closing brace "}"
word "pr_warn"
opening parenthesis "("
string literal '"Error taking CPU%d up: %d\n"'
comma ","
word "cpu"
comma ","
word "error"
closing parenthesis ")"
end-of-statement operator ";"
closing brace "}"
word "arch_enable_nonboot_cpus_end"
opening parenthesis "("
closing parenthesis ")"
end-of-statement operator ";"
word "cpumask_clear"
opening parenthesis "("
word "frozen_cpus"
closing parenthesis ")"
end-of-statement operator ";"
word "out"
ternary colon operator ":"
word "cpu_maps_update_done"
opening parenthesis "("
closing parenthesis ")"
end-of-statement operator ";"
closing brace "}"
reserved word "static"
reserved word "int"
word "__init"
word "alloc_frozen_cpus"
opening parenthesis "("
word "void"
closing parenthesis ")"
opening brace "{"
reserved word "if"
opening parenthesis "("
logical-not operator "!"
word "alloc_cpumask_var"
opening parenthesis "("
bitwise-and operator/address operator "&"
word "frozen_cpus"
comma ","
word "GFP_KERNEL"
bitwise-or operator "|"
word "__GFP_ZERO"
closing parenthesis ")"
closing parenthesis ")"
reserved word "return"
subtraction operator "-"
word "ENOMEM"
end-of-statement operator ";"
reserved word "return"
zero integer "0"
end-of-statement operator ";"
closing brace "}"
word "core_initcall"
opening parenthesis "("
word "alloc_frozen_cpus"
closing parenthesis ")"
end-of-statement operator ";"
reserved word "static"
reserved word "int"
word "cpu_hotplug_pm_callback"
opening parenthesis "("
reserved word "struct"
word "notifier_block"
multiplication operator/pointer operator "*"
word "nb"
comma ","
word "unsigned"
reserved word "long"
word "action"
comma ","
word "void"
multiplication operator/pointer operator "*"
word "ptr"
closing parenthesis ")"
opening brace "{"
reserved word "switch"
opening parenthesis "("
word "action"
closing parenthesis ")"
opening brace "{"
reserved word "case"
word "PM_SUSPEND_PREPARE"
ternary colon operator ":"
reserved word "case"
word "PM_HIBERNATION_PREPARE"
ternary colon operator ":"
word "cpu_hotplug_disable"
opening parenthesis "("
closing parenthesis ")"
end-of-statement operator ";"
reserved word "break"
end-of-statement operator ";"
reserved word "case"
word "PM_POST_SUSPEND"
ternary colon operator ":"
reserved word "case"
word "PM_POST_HIBERNATION"
ternary colon operator ":"
word "cpu_hotplug_enable"
opening parenthesis "("
closing parenthesis ")"
end-of-statement operator ";"
reserved word "break"
end-of-statement operator ";"
reserved word "default"
ternary colon operator ":"
reserved word "return"
word "NOTIFY_DONE"
end-of-statement operator ";"
closing brace "}"
reserved word "return"
word "NOTIFY_OK"
end-of-statement operator ";"
closing brace "}"
reserved word "static"
reserved word "int"
word "__init"
word "cpu_hotplug_pm_sync_init"
opening parenthesis "("
word "void"
closing parenthesis ")"
opening brace "{"
word "pm_notifier"
opening parenthesis "("
word "cpu_hotplug_pm_callback"
comma ","
zero integer "0"
closing parenthesis ")"
end-of-statement operator ";"
reserved word "return"
zero integer "0"
end-of-statement operator ";"
closing brace "}"
word "core_initcall"
opening parenthesis "("
word "cpu_hotplug_pm_sync_init"
closing parenthesis ")"
end-of-statement operator ";"
include operator "#"
word "endif"
word "void"
word "notify_cpu_starting"
opening parenthesis "("
word "unsigned"
reserved word "int"
word "cpu"
closing parenthesis ")"
opening brace "{"
word "unsigned"
reserved word "long"
word "val"
assignment operator "="
word "CPU_STARTING"
end-of-statement operator ";"
include operator "#"
word "ifdef"
word "CONFIG_PM_SLEEP_SMP"
reserved word "if"
opening parenthesis "("
word "frozen_cpus"
not-equals operator "!="
word "NULL"
logical-and operator "&&"
word "cpumask_test_cpu"
opening parenthesis "("
word "cpu"
comma ","
word "frozen_cpus"
closing parenthesis ")"
closing parenthesis ")"
word "val"
assignment operator "="
word "CPU_STARTING_FROZEN"
end-of-statement operator ";"
include operator "#"
word "endif"
word "cpu_notify"
opening parenthesis "("
word "val"
comma ","
opening parenthesis "("
word "void"
multiplication operator/pointer operator "*"
closing parenthesis ")"
opening parenthesis "("
reserved word "long"
closing parenthesis ")"
word "cpu"
closing parenthesis ")"
end-of-statement operator ";"
closing brace "}"
include operator "#"
word "endif"
include operator "#"
word "define"
word "MASK_DECLARE_1"
opening parenthesis "("
word "x"
closing parenthesis ")"
opening bracket "["
word "x"
addition operator "+"
decimal integer "1"
closing bracket "]"
opening bracket "["
zero integer "0"
closing bracket "]"
assignment operator "="
opening parenthesis "("
decimal integer "1"
word "UL"
left-shift operator "<<"
opening parenthesis "("
word "x"
closing parenthesis ")"
closing parenthesis ")"
include operator "#"
word "define"
word "MASK_DECLARE_2"
opening parenthesis "("
word "x"
closing parenthesis ")"
word "MASK_DECLARE_1"
opening parenthesis "("
word "x"
closing parenthesis ")"
comma ","
word "MASK_DECLARE_1"
opening parenthesis "("
word "x"
addition operator "+"
decimal integer "1"
closing parenthesis ")"
include operator "#"
word "define"
word "MASK_DECLARE_4"
opening parenthesis "("
word "x"
closing parenthesis ")"
word "MASK_DECLARE_2"
opening parenthesis "("
word "x"
closing parenthesis ")"
comma ","
word "MASK_DECLARE_2"
opening parenthesis "("
word "x"
addition operator "+"
decimal integer "2"
closing parenthesis ")"
include operator "#"
word "define"
word "MASK_DECLARE_8"
opening parenthesis "("
word "x"
closing parenthesis ")"
word "MASK_DECLARE_4"
opening parenthesis "("
word "x"
closing parenthesis ")"
comma ","
word "MASK_DECLARE_4"
opening parenthesis "("
word "x"
addition operator "+"
decimal integer "4"
closing parenthesis ")"
reserved word "const"
word "unsigned"
reserved word "long"
word "cpu_bit_bitmap"
opening bracket "["
word "BITS_PER_LONG"
addition operator "+"
decimal integer "1"
closing bracket "]"
opening bracket "["
word "BITS_TO_LONGS"
opening parenthesis "("
word "NR_CPUS"
closing parenthesis ")"
closing bracket "]"
assignment operator "="
opening brace "{"
word "MASK_DECLARE_8"
opening parenthesis "("
zero integer "0"
closing parenthesis ")"
comma ","
word "MASK_DECLARE_8"
opening parenthesis "("
decimal integer "8"
closing parenthesis ")"
comma ","
word "MASK_DECLARE_8"
opening parenthesis "("
decimal integer "16"
closing parenthesis ")"
comma ","
word "MASK_DECLARE_8"
opening parenthesis "("
decimal integer "24"
closing parenthesis ")"
comma ","
include operator "#"
reserved word "if"
word "BITS_PER_LONG"
greater-than operator ">"
decimal integer "32"
word "MASK_DECLARE_8"
opening parenthesis "("
decimal integer "32"
closing parenthesis ")"
comma ","
word "MASK_DECLARE_8"
opening parenthesis "("
decimal integer "40"
closing parenthesis ")"
comma ","
word "MASK_DECLARE_8"
opening parenthesis "("
decimal integer "48"
closing parenthesis ")"
comma ","
word "MASK_DECLARE_8"
opening parenthesis "("
decimal integer "56"
closing parenthesis ")"
comma ","
include operator "#"
word "endif"
closing brace "}"
end-of-statement operator ";"
word "EXPORT_SYMBOL_GPL"
opening parenthesis "("
word "cpu_bit_bitmap"
closing parenthesis ")"
end-of-statement operator ";"
reserved word "const"
word "DECLARE_BITMAP"
opening parenthesis "("
word "cpu_all_bits"
comma ","
word "NR_CPUS"
closing parenthesis ")"
assignment operator "="
word "CPU_BITS_ALL"
end-of-statement operator ";"
word "EXPORT_SYMBOL"
opening parenthesis "("
word "cpu_all_bits"
closing parenthesis ")"
end-of-statement operator ";"
include operator "#"
word "ifdef"
word "CONFIG_INIT_ALL_POSSIBLE"
reserved word "static"
word "DECLARE_BITMAP"
opening parenthesis "("
word "cpu_possible_bits"
comma ","
word "CONFIG_NR_CPUS"
closing parenthesis ")"
word "__read_mostly"
assignment operator "="
word "CPU_BITS_ALL"
end-of-statement operator ";"
include operator "#"
reserved word "else"
reserved word "static"
word "DECLARE_BITMAP"
opening parenthesis "("
word "cpu_possible_bits"
comma ","
word "CONFIG_NR_CPUS"
closing parenthesis ")"
word "__read_mostly"
end-of-statement operator ";"
include operator "#"
word "endif"
reserved word "const"
reserved word "struct"
word "cpumask"
multiplication operator/pointer operator "*"
reserved word "const"
word "cpu_possible_mask"
assignment operator "="
word "to_cpumask"
opening parenthesis "("
word "cpu_possible_bits"
closing parenthesis ")"
end-of-statement operator ";"
word "EXPORT_SYMBOL"
opening parenthesis "("
word "cpu_possible_mask"
closing parenthesis ")"
end-of-statement operator ";"
reserved word "static"
word "DECLARE_BITMAP"
opening parenthesis "("
word "cpu_online_bits"
comma ","
word "CONFIG_NR_CPUS"
closing parenthesis ")"
word "__read_mostly"
end-of-statement operator ";"
reserved word "const"
reserved word "struct"
word "cpumask"
multiplication operator/pointer operator "*"
reserved word "const"
word "cpu_online_mask"
assignment operator "="
word "to_cpumask"
opening parenthesis "("
word "cpu_online_bits"
closing parenthesis ")"
end-of-statement operator ";"
word "EXPORT_SYMBOL"
opening parenthesis "("
word "cpu_online_mask"
closing parenthesis ")"
end-of-statement operator ";"
reserved word "static"
word "DECLARE_BITMAP"
opening parenthesis "("
word "cpu_present_bits"
comma ","
word "CONFIG_NR_CPUS"
closing parenthesis ")"
word "__read_mostly"
end-of-statement operator ";"
reserved word "const"
reserved word "struct"
word "cpumask"
multiplication operator/pointer operator "*"
reserved word "const"
word "cpu_present_mask"
assignment operator "="
word "to_cpumask"
opening parenthesis "("
word "cpu_present_bits"
closing parenthesis ")"
end-of-statement operator ";"
word "EXPORT_SYMBOL"
opening parenthesis "("
word "cpu_present_mask"
closing parenthesis ")"
end-of-statement operator ";"
reserved word "static"
word "DECLARE_BITMAP"
opening parenthesis "("
word "cpu_active_bits"
comma ","
word "CONFIG_NR_CPUS"
closing parenthesis ")"
word "__read_mostly"
end-of-statement operator ";"
reserved word "const"
reserved word "struct"
word "cpumask"
multiplication operator/pointer operator "*"
reserved word "const"
word "cpu_active_mask"
assignment operator "="
word "to_cpumask"
opening parenthesis "("
word "cpu_active_bits"
closing parenthesis ")"
end-of-statement operator ";"
word "EXPORT_SYMBOL"
opening parenthesis "("
word "cpu_active_mask"
closing parenthesis ")"
end-of-statement operator ";"
word "void"
word "set_cpu_possible"
opening parenthesis "("
word "unsigned"
reserved word "int"
word "cpu"
comma ","
word "bool"
word "possible"
closing parenthesis ")"
opening brace "{"
reserved word "if"
opening parenthesis "("
word "possible"
closing parenthesis ")"
word "cpumask_set_cpu"
opening parenthesis "("
word "cpu"
comma ","
word "to_cpumask"
opening parenthesis "("
word "cpu_possible_bits"
closing parenthesis ")"
closing parenthesis ")"
end-of-statement operator ";"
reserved word "else"
word "cpumask_clear_cpu"
opening parenthesis "("
word "cpu"
comma ","
word "to_cpumask"
opening parenthesis "("
word "cpu_possible_bits"
closing parenthesis ")"
closing parenthesis ")"
end-of-statement operator ";"
closing brace "}"
word "void"
word "set_cpu_present"
opening parenthesis "("
word "unsigned"
reserved word "int"
word "cpu"
comma ","
word "bool"
word "present"
closing parenthesis ")"
opening brace "{"
reserved word "if"
opening parenthesis "("
word "present"
closing parenthesis ")"
word "cpumask_set_cpu"
opening parenthesis "("
word "cpu"
comma ","
word "to_cpumask"
opening parenthesis "("
word "cpu_present_bits"
closing parenthesis ")"
closing parenthesis ")"
end-of-statement operator ";"
reserved word "else"
word "cpumask_clear_cpu"
opening parenthesis "("
word "cpu"
comma ","
word "to_cpumask"
opening parenthesis "("
word "cpu_present_bits"
closing parenthesis ")"
closing parenthesis ")"
end-of-statement operator ";"
closing brace "}"
word "void"
word "set_cpu_online"
opening parenthesis "("
word "unsigned"
reserved word "int"
word "cpu"
comma ","
word "bool"
word "online"
closing parenthesis ")"
opening brace "{"
reserved word "if"
opening parenthesis "("
word "online"
closing parenthesis ")"
opening brace "{"
word "cpumask_set_cpu"
opening parenthesis "("
word "cpu"
comma ","
word "to_cpumask"
opening parenthesis "("
word "cpu_online_bits"
closing parenthesis ")"
closing parenthesis ")"
end-of-statement operator ";"
word "cpumask_set_cpu"
opening parenthesis "("
word "cpu"
comma ","
word "to_cpumask"
opening parenthesis "("
word "cpu_active_bits"
closing parenthesis ")"
closing parenthesis ")"
end-of-statement operator ";"
closing brace "}"
reserved word "else"
opening brace "{"
word "cpumask_clear_cpu"
opening parenthesis "("
word "cpu"
comma ","
word "to_cpumask"
opening parenthesis "("
word "cpu_online_bits"
closing parenthesis ")"
closing parenthesis ")"
end-of-statement operator ";"
closing brace "}"
closing brace "}"
word "void"
word "set_cpu_active"
opening parenthesis "("
word "unsigned"
reserved word "int"
word "cpu"
comma ","
word "bool"
word "active"
closing parenthesis ")"
opening brace "{"
reserved word "if"
opening parenthesis "("
word "active"
closing parenthesis ")"
word "cpumask_set_cpu"
opening parenthesis "("
word "cpu"
comma ","
word "to_cpumask"
opening parenthesis "("
word "cpu_active_bits"
closing parenthesis ")"
closing parenthesis ")"
end-of-statement operator ";"
reserved word "else"
word "cpumask_clear_cpu"
opening parenthesis "("
word "cpu"
comma ","
word "to_cpumask"
opening parenthesis "("
word "cpu_active_bits"
closing parenthesis ")"
closing parenthesis ")"
end-of-statement operator ";"
closing brace "}"
word "void"
word "init_cpu_present"
opening parenthesis "("
reserved word "const"
reserved word "struct"
word "cpumask"
multiplication operator/pointer operator "*"
word "src"
closing parenthesis ")"
opening brace "{"
word "cpumask_copy"
opening parenthesis "("
word "to_cpumask"
opening parenthesis "("
word "cpu_present_bits"
closing parenthesis ")"
comma ","
word "src"
closing parenthesis ")"
end-of-statement operator ";"
closing brace "}"
word "void"
word "init_cpu_possible"
opening parenthesis "("
reserved word "const"
reserved word "struct"
word "cpumask"
multiplication operator/pointer operator "*"
word "src"
closing parenthesis ")"
opening brace "{"
word "cpumask_copy"
opening parenthesis "("
word "to_cpumask"
opening parenthesis "("
word "cpu_possible_bits"
closing parenthesis ")"
comma ","
word "src"
closing parenthesis ")"
end-of-statement operator ";"
closing brace "}"
word "void"
word "init_cpu_online"
opening parenthesis "("
reserved word "const"
reserved word "struct"
word "cpumask"
multiplication operator/pointer operator "*"
word "src"
closing parenthesis ")"
opening brace "{"
word "cpumask_copy"
opening parenthesis "("
word "to_cpumask"
opening parenthesis "("
word "cpu_online_bits"
closing parenthesis ")"
comma ","
word "src"
closing parenthesis ")"
end-of-statement operator ";"
closing brace "}"
