include operator "#"
word "include"
less-than operator "<"
word "stdio"
struct member operator "."
word "h"
greater-than operator ">"
include operator "#"
word "include"
less-than operator "<"
word "stdlib"
struct member operator "."
word "h"
greater-than operator ">"
include operator "#"
word "include"
less-than operator "<"
word "ctype"
struct member operator "."
word "h"
greater-than operator ">"
include operator "#"
word "include"
less-than operator "<"
word "string"
struct member operator "."
word "h"
greater-than operator ">"
include operator "#"
word "include"
less-than operator "<"
word "assert"
struct member operator "."
word "h"
greater-than operator ">"
reserved word "struct"
word "TokenizerT_"
opening brace "{"
reserved word "char"
multiplication operator/pointer operator "*"
word "inputStream"
end-of-statement operator ";"
reserved word "char"
multiplication operator/pointer operator "*"
word "tokenBuffer"
end-of-statement operator ";"
reserved word "char"
multiplication operator/pointer operator "*"
word "inputIter"
end-of-statement operator ";"
reserved word "char"
multiplication operator/pointer operator "*"
word "bufferIter"
end-of-statement operator ";"
reserved word "int"
word "bufferSize"
end-of-statement operator ";"
closing brace "}"
end-of-statement operator ";"
reserved word "struct"
word "TokenT_"
opening brace "{"
reserved word "char"
multiplication operator/pointer operator "*"
word "text"
end-of-statement operator ";"
reserved word "char"
multiplication operator/pointer operator "*"
word "type"
end-of-statement operator ";"
closing brace "}"
end-of-statement operator ";"
reserved word "typedef"
reserved word "struct"
word "TokenT_"
word "TokenT"
end-of-statement operator ";"
reserved word "typedef"
reserved word "struct"
word "TokenizerT_"
word "TokenizerT"
end-of-statement operator ";"
reserved word "int"
word "isOctal"
opening parenthesis "("
reserved word "char"
word "curr"
closing parenthesis ")"
opening brace "{"
reserved word "if"
opening parenthesis "("
word "curr"
greater-than-or-equal-to operator ">="
char literal "'0'"
logical-and operator "&&"
word "curr"
less-than-or-equal-to operator "<="
char literal "'7'"
closing parenthesis ")"
opening brace "{"
reserved word "return"
decimal integer "1"
end-of-statement operator ";"
closing brace "}"
reserved word "else"
opening brace "{"
reserved word "return"
zero integer "0"
end-of-statement operator ";"
closing brace "}"
closing brace "}"
word "TokenizerT"
multiplication operator/pointer operator "*"
word "TKCreate"
opening parenthesis "("
reserved word "char"
multiplication operator/pointer operator "*"
word "ts"
closing parenthesis ")"
opening brace "{"
word "TokenizerT"
multiplication operator/pointer operator "*"
word "newTokenizer"
assignment operator "="
opening parenthesis "("
word "TokenizerT"
multiplication operator/pointer operator "*"
closing parenthesis ")"
word "malloc"
opening parenthesis "("
reserved word "sizeof"
opening parenthesis "("
word "TokenizerT"
closing parenthesis ")"
closing parenthesis ")"
end-of-statement operator ";"
reserved word "long"
reserved word "int"
word "streamSize"
assignment operator "="
word "strlen"
opening parenthesis "("
word "ts"
closing parenthesis ")"
addition operator "+"
decimal integer "2"
end-of-statement operator ";"
word "newTokenizer"
struct pointer operator "->"
word "inputStream"
assignment operator "="
opening parenthesis "("
reserved word "char"
multiplication operator/pointer operator "*"
closing parenthesis ")"
word "malloc"
opening parenthesis "("
reserved word "sizeof"
opening parenthesis "("
reserved word "char"
closing parenthesis ")"
multiplication operator/pointer operator "*"
word "streamSize"
closing parenthesis ")"
end-of-statement operator ";"
word "strcpy"
opening parenthesis "("
word "newTokenizer"
struct pointer operator "->"
word "inputStream"
comma ","
word "ts"
closing parenthesis ")"
end-of-statement operator ";"
word "newTokenizer"
struct pointer operator "->"
word "inputIter"
assignment operator "="
word "newTokenizer"
struct pointer operator "->"
word "inputStream"
end-of-statement operator ";"
word "newTokenizer"
struct pointer operator "->"
word "bufferSize"
assignment operator "="
zero integer "0"
end-of-statement operator ";"
word "newTokenizer"
struct pointer operator "->"
word "tokenBuffer"
assignment operator "="
opening parenthesis "("
reserved word "char"
multiplication operator/pointer operator "*"
closing parenthesis ")"
word "malloc"
opening parenthesis "("
reserved word "sizeof"
opening parenthesis "("
reserved word "char"
closing parenthesis ")"
multiplication operator/pointer operator "*"
decimal integer "1000"
closing parenthesis ")"
end-of-statement operator ";"
word "strcpy"
opening parenthesis "("
word "newTokenizer"
struct pointer operator "->"
word "tokenBuffer"
comma ","
string literal '""'
closing parenthesis ")"
end-of-statement operator ";"
word "newTokenizer"
struct pointer operator "->"
word "bufferIter"
assignment operator "="
word "newTokenizer"
struct pointer operator "->"
word "tokenBuffer"
end-of-statement operator ";"
reserved word "return"
word "newTokenizer"
end-of-statement operator ";"
closing brace "}"
word "void"
word "TKDestroy"
opening parenthesis "("
word "TokenizerT"
multiplication operator/pointer operator "*"
word "tk"
closing parenthesis ")"
opening brace "{"
word "assert"
opening parenthesis "("
word "tk"
not-equals operator "!="
word "NULL"
closing parenthesis ")"
end-of-statement operator ";"
word "free"
opening parenthesis "("
word "tk"
struct pointer operator "->"
word "inputStream"
closing parenthesis ")"
end-of-statement operator ";"
word "free"
opening parenthesis "("
word "tk"
struct pointer operator "->"
word "tokenBuffer"
closing parenthesis ")"
end-of-statement operator ";"
word "free"
opening parenthesis "("
word "tk"
closing parenthesis ")"
end-of-statement operator ";"
closing brace "}"
reserved word "int"
word "nextChar"
opening parenthesis "("
word "TokenizerT"
multiplication operator/pointer operator "*"
word "tk"
closing parenthesis ")"
opening brace "{"
word "tk"
struct pointer operator "->"
word "bufferIter"
opening bracket "["
zero integer "0"
closing bracket "]"
assignment operator "="
word "tk"
struct pointer operator "->"
word "inputIter"
opening bracket "["
zero integer "0"
closing bracket "]"
end-of-statement operator ";"
word "tk"
struct pointer operator "->"
word "inputIter"
increment operator "++"
end-of-statement operator ";"
word "tk"
struct pointer operator "->"
word "bufferIter"
increment operator "++"
end-of-statement operator ";"
word "tk"
struct pointer operator "->"
word "bufferIter"
opening bracket "["
zero integer "0"
closing bracket "]"
assignment operator "="
char literal "'\0'"
end-of-statement operator ";"
word "tk"
struct pointer operator "->"
word "bufferSize"
increment operator "++"
end-of-statement operator ";"
reserved word "if"
opening parenthesis "("
word "tk"
struct pointer operator "->"
word "bufferSize"
equality operator "=="
decimal integer "999"
closing parenthesis ")"
opening brace "{"
word "exit"
opening parenthesis "("
decimal integer "1"
closing parenthesis ")"
end-of-statement operator ";"
closing brace "}"
word "assert"
opening parenthesis "("
word "strlen"
opening parenthesis "("
word "tk"
struct pointer operator "->"
word "bufferIter"
closing parenthesis ")"
equality operator "=="
zero integer "0"
closing parenthesis ")"
end-of-statement operator ";"
reserved word "int"
word "nextIsNull"
assignment operator "="
zero integer "0"
end-of-statement operator ";"
reserved word "if"
opening parenthesis "("
word "tk"
struct pointer operator "->"
word "inputIter"
opening bracket "["
zero integer "0"
closing bracket "]"
equality operator "=="
char literal "'\0'"
closing parenthesis ")"
opening brace "{"
word "nextIsNull"
assignment operator "="
decimal integer "1"
end-of-statement operator ";"
closing brace "}"
reserved word "return"
word "nextIsNull"
end-of-statement operator ";"
closing brace "}"
word "void"
word "clearBuffer"
opening parenthesis "("
word "TokenizerT"
multiplication operator/pointer operator "*"
word "tk"
closing parenthesis ")"
opening brace "{"
word "tk"
struct pointer operator "->"
word "bufferSize"
assignment operator "="
zero integer "0"
end-of-statement operator ";"
word "tk"
struct pointer operator "->"
word "bufferIter"
assignment operator "="
word "tk"
struct pointer operator "->"
word "tokenBuffer"
end-of-statement operator ";"
word "tk"
struct pointer operator "->"
word "bufferIter"
opening bracket "["
zero integer "0"
closing bracket "]"
assignment operator "="
char literal "'\0'"
end-of-statement operator ";"
word "assert"
opening parenthesis "("
word "strlen"
opening parenthesis "("
word "tk"
struct pointer operator "->"
word "tokenBuffer"
closing parenthesis ")"
equality operator "=="
zero integer "0"
closing parenthesis ")"
end-of-statement operator ";"
closing brace "}"
reserved word "int"
word "isReservedWord"
opening parenthesis "("
reserved word "char"
multiplication operator/pointer operator "*"
word "word"
closing parenthesis ")"
opening brace "{"
reserved word "const"
reserved word "char"
multiplication operator/pointer operator "*"
word "reservedWords"
opening bracket "["
decimal integer "33"
closing bracket "]"
end-of-statement operator ";"
word "reservedWords"
opening bracket "["
zero integer "0"
closing bracket "]"
assignment operator "="
string literal '"auto"'
end-of-statement operator ";"
word "reservedWords"
opening bracket "["
decimal integer "1"
closing bracket "]"
assignment operator "="
string literal '"break"'
end-of-statement operator ";"
word "reservedWords"
opening bracket "["
decimal integer "2"
closing bracket "]"
assignment operator "="
string literal '"case"'
end-of-statement operator ";"
word "reservedWords"
opening bracket "["
decimal integer "3"
closing bracket "]"
assignment operator "="
string literal '"char"'
end-of-statement operator ";"
word "reservedWords"
opening bracket "["
decimal integer "4"
closing bracket "]"
assignment operator "="
string literal '"const"'
end-of-statement operator ";"
word "reservedWords"
opening bracket "["
decimal integer "5"
closing bracket "]"
assignment operator "="
string literal '"continue"'
end-of-statement operator ";"
word "reservedWords"
opening bracket "["
decimal integer "6"
closing bracket "]"
assignment operator "="
string literal '"default"'
end-of-statement operator ";"
word "reservedWords"
opening bracket "["
decimal integer "7"
closing bracket "]"
assignment operator "="
string literal '"do"'
end-of-statement operator ";"
word "reservedWords"
opening bracket "["
decimal integer "8"
closing bracket "]"
assignment operator "="
string literal '"double"'
end-of-statement operator ";"
word "reservedWords"
opening bracket "["
decimal integer "9"
closing bracket "]"
assignment operator "="
string literal '"else"'
end-of-statement operator ";"
word "reservedWords"
opening bracket "["
decimal integer "10"
closing bracket "]"
assignment operator "="
string literal '"enum"'
end-of-statement operator ";"
word "reservedWords"
opening bracket "["
decimal integer "11"
closing bracket "]"
assignment operator "="
string literal '"entry"'
end-of-statement operator ";"
word "reservedWords"
opening bracket "["
decimal integer "12"
closing bracket "]"
assignment operator "="
string literal '"extern"'
end-of-statement operator ";"
word "reservedWords"
opening bracket "["
decimal integer "13"
closing bracket "]"
assignment operator "="
string literal '"float"'
end-of-statement operator ";"
word "reservedWords"
opening bracket "["
decimal integer "14"
closing bracket "]"
assignment operator "="
string literal '"for"'
end-of-statement operator ";"
word "reservedWords"
opening bracket "["
decimal integer "15"
closing bracket "]"
assignment operator "="
string literal '"goto"'
end-of-statement operator ";"
word "reservedWords"
opening bracket "["
decimal integer "16"
closing bracket "]"
assignment operator "="
string literal '"if"'
end-of-statement operator ";"
word "reservedWords"
opening bracket "["
decimal integer "17"
closing bracket "]"
assignment operator "="
string literal '"int"'
end-of-statement operator ";"
word "reservedWords"
opening bracket "["
decimal integer "18"
closing bracket "]"
assignment operator "="
string literal '"long"'
end-of-statement operator ";"
word "reservedWords"
opening bracket "["
decimal integer "19"
closing bracket "]"
assignment operator "="
string literal '"register"'
end-of-statement operator ";"
word "reservedWords"
opening bracket "["
decimal integer "20"
closing bracket "]"
assignment operator "="
string literal '"return"'
end-of-statement operator ";"
word "reservedWords"
opening bracket "["
decimal integer "21"
closing bracket "]"
assignment operator "="
string literal '"short"'
end-of-statement operator ";"
word "reservedWords"
opening bracket "["
decimal integer "22"
closing bracket "]"
assignment operator "="
string literal '"signed"'
end-of-statement operator ";"
word "reservedWords"
opening bracket "["
decimal integer "23"
closing bracket "]"
assignment operator "="
string literal '"sizeof"'
end-of-statement operator ";"
word "reservedWords"
opening bracket "["
decimal integer "24"
closing bracket "]"
assignment operator "="
string literal '"static"'
end-of-statement operator ";"
word "reservedWords"
opening bracket "["
decimal integer "25"
closing bracket "]"
assignment operator "="
string literal '"struct"'
end-of-statement operator ";"
word "reservedWords"
opening bracket "["
decimal integer "26"
closing bracket "]"
assignment operator "="
string literal '"switch"'
end-of-statement operator ";"
word "reservedWords"
opening bracket "["
decimal integer "27"
closing bracket "]"
assignment operator "="
string literal '"typedef"'
end-of-statement operator ";"
word "reservedWords"
opening bracket "["
decimal integer "28"
closing bracket "]"
assignment operator "="
string literal '"union"'
end-of-statement operator ";"
word "reservedWords"
opening bracket "["
decimal integer "29"
closing bracket "]"
assignment operator "="
string literal '"unsigned"'
end-of-statement operator ";"
word "reservedWords"
opening bracket "["
decimal integer "30"
closing bracket "]"
assignment operator "="
string literal '"void"'
end-of-statement operator ";"
word "reservedWords"
opening bracket "["
decimal integer "31"
closing bracket "]"
assignment operator "="
string literal '"volatile"'
end-of-statement operator ";"
word "reservedWords"
opening bracket "["
decimal integer "32"
closing bracket "]"
assignment operator "="
string literal '"unsigned"'
end-of-statement operator ";"
word "reservedWords"
opening bracket "["
decimal integer "33"
closing bracket "]"
assignment operator "="
string literal '"while"'
end-of-statement operator ";"
reserved word "int"
word "isReservedWord"
assignment operator "="
zero integer "0"
end-of-statement operator ";"
reserved word "int"
word "rWordIndex"
assignment operator "="
zero integer "0"
end-of-statement operator ";"
reserved word "for"
opening parenthesis "("
end-of-statement operator ";"
word "rWordIndex"
less-than operator "<"
decimal integer "28"
end-of-statement operator ";"
word "rWordIndex"
increment operator "++"
closing parenthesis ")"
opening brace "{"
reserved word "if"
opening parenthesis "("
word "strcmp"
opening parenthesis "("
word "word"
comma ","
word "reservedWords"
opening bracket "["
word "rWordIndex"
closing bracket "]"
closing parenthesis ")"
equality operator "=="
zero integer "0"
closing parenthesis ")"
opening brace "{"
word "isReservedWord"
assignment operator "="
decimal integer "1"
end-of-statement operator ";"
closing brace "}"
closing brace "}"
reserved word "return"
word "isReservedWord"
end-of-statement operator ";"
closing brace "}"
word "TokenT"
multiplication operator/pointer operator "*"
word "makeToken"
opening parenthesis "("
word "TokenizerT"
multiplication operator/pointer operator "*"
word "tk"
comma ","
reserved word "char"
multiplication operator/pointer operator "*"
word "type"
closing parenthesis ")"
opening brace "{"
word "TokenT"
multiplication operator/pointer operator "*"
word "token"
assignment operator "="
opening parenthesis "("
word "TokenT"
multiplication operator/pointer operator "*"
closing parenthesis ")"
word "malloc"
opening parenthesis "("
reserved word "sizeof"
opening parenthesis "("
word "TokenT"
closing parenthesis ")"
closing parenthesis ")"
end-of-statement operator ";"
word "token"
struct pointer operator "->"
word "text"
assignment operator "="
opening parenthesis "("
reserved word "char"
multiplication operator/pointer operator "*"
closing parenthesis ")"
word "malloc"
opening parenthesis "("
reserved word "sizeof"
opening parenthesis "("
reserved word "char"
closing parenthesis ")"
multiplication operator/pointer operator "*"
decimal integer "1000"
closing parenthesis ")"
end-of-statement operator ";"
word "strcpy"
opening parenthesis "("
word "token"
struct pointer operator "->"
word "text"
comma ","
word "tk"
struct pointer operator "->"
word "tokenBuffer"
closing parenthesis ")"
end-of-statement operator ";"
word "token"
struct pointer operator "->"
word "type"
assignment operator "="
opening parenthesis "("
reserved word "char"
multiplication operator/pointer operator "*"
closing parenthesis ")"
word "malloc"
opening parenthesis "("
reserved word "sizeof"
opening parenthesis "("
reserved word "char"
closing parenthesis ")"
multiplication operator/pointer operator "*"
decimal integer "50"
closing parenthesis ")"
end-of-statement operator ";"
word "strcpy"
opening parenthesis "("
word "token"
struct pointer operator "->"
word "type"
comma ","
word "type"
closing parenthesis ")"
end-of-statement operator ";"
reserved word "return"
word "token"
end-of-statement operator ";"
closing brace "}"
word "void"
word "destroyToken"
opening parenthesis "("
word "TokenT"
multiplication operator/pointer operator "*"
word "token"
closing parenthesis ")"
opening brace "{"
word "free"
opening parenthesis "("
word "token"
struct pointer operator "->"
word "text"
closing parenthesis ")"
end-of-statement operator ";"
word "free"
opening parenthesis "("
word "token"
struct pointer operator "->"
word "type"
closing parenthesis ")"
end-of-statement operator ";"
word "free"
opening parenthesis "("
word "token"
closing parenthesis ")"
end-of-statement operator ";"
closing brace "}"
word "void"
word "printToken"
opening parenthesis "("
word "TokenT"
multiplication operator/pointer operator "*"
word "token"
closing parenthesis ")"
opening brace "{"
reserved word "if"
opening parenthesis "("
word "strcmp"
opening parenthesis "("
word "token"
struct pointer operator "->"
word "type"
comma ","
string literal '"string literal"'
closing parenthesis ")"
equality operator "=="
zero integer "0"
closing parenthesis ")"
opening brace "{"
word "printf"
opening parenthesis "("
string literal '"%s '%s'\n"'
comma ","
word "token"
struct pointer operator "->"
word "type"
comma ","
word "token"
struct pointer operator "->"
word "text"
closing parenthesis ")"
end-of-statement operator ";"
closing brace "}"
reserved word "else"
opening brace "{"
word "printf"
opening parenthesis "("
string literal '"%s \"%s\"\n"'
comma ","
word "token"
struct pointer operator "->"
word "type"
comma ","
word "token"
struct pointer operator "->"
word "text"
closing parenthesis ")"
end-of-statement operator ";"
closing brace "}"
closing brace "}"
word "TokenT"
multiplication operator/pointer operator "*"
word "TKGetNextToken"
opening parenthesis "("
word "TokenizerT"
multiplication operator/pointer operator "*"
word "tk"
closing parenthesis ")"
end-of-statement operator ";"
word "TokenT"
multiplication operator/pointer operator "*"
word "_invalid"
opening parenthesis "("
word "TokenizerT"
multiplication operator/pointer operator "*"
word "tk"
closing parenthesis ")"
opening brace "{"
word "nextChar"
opening parenthesis "("
word "tk"
closing parenthesis ")"
end-of-statement operator ";"
reserved word "return"
word "makeToken"
opening parenthesis "("
word "tk"
comma ","
string literal '"invalid token"'
closing parenthesis ")"
end-of-statement operator ";"
closing brace "}"
word "TokenT"
multiplication operator/pointer operator "*"
word "_word"
opening parenthesis "("
word "TokenizerT"
multiplication operator/pointer operator "*"
word "tk"
closing parenthesis ")"
opening brace "{"
word "nextChar"
opening parenthesis "("
word "tk"
closing parenthesis ")"
end-of-statement operator ";"
reserved word "if"
opening parenthesis "("
word "isalnum"
opening parenthesis "("
word "tk"
struct pointer operator "->"
word "inputIter"
opening bracket "["
zero integer "0"
closing bracket "]"
closing parenthesis ")"
logical-or operator "||"
word "tk"
struct pointer operator "->"
word "inputIter"
opening bracket "["
zero integer "0"
closing bracket "]"
equality operator "=="
char literal "'_'"
closing parenthesis ")"
opening brace "{"
reserved word "return"
word "_word"
opening parenthesis "("
word "tk"
closing parenthesis ")"
end-of-statement operator ";"
closing brace "}"
reserved word "else"
opening brace "{"
reserved word "if"
opening parenthesis "("
word "isReservedWord"
opening parenthesis "("
word "tk"
struct pointer operator "->"
word "tokenBuffer"
closing parenthesis ")"
closing parenthesis ")"
opening brace "{"
reserved word "return"
word "makeToken"
opening parenthesis "("
word "tk"
comma ","
string literal '"reserved word"'
closing parenthesis ")"
end-of-statement operator ";"
closing brace "}"
reserved word "else"
opening brace "{"
reserved word "return"
word "makeToken"
opening parenthesis "("
word "tk"
comma ","
string literal '"word"'
closing parenthesis ")"
end-of-statement operator ";"
closing brace "}"
closing brace "}"
closing brace "}"
word "TokenT"
multiplication operator/pointer operator "*"
word "_neq"
opening parenthesis "("
word "TokenizerT"
multiplication operator/pointer operator "*"
word "tk"
closing parenthesis ")"
opening brace "{"
reserved word "int"
word "atEndOfFile"
assignment operator "="
word "nextChar"
opening parenthesis "("
word "tk"
closing parenthesis ")"
end-of-statement operator ";"
reserved word "if"
opening parenthesis "("
word "atEndOfFile"
closing parenthesis ")"
opening brace "{"
reserved word "return"
word "_invalid"
opening parenthesis "("
word "tk"
closing parenthesis ")"
end-of-statement operator ";"
closing brace "}"
reserved word "if"
opening parenthesis "("
word "tk"
struct pointer operator "->"
word "inputIter"
opening bracket "["
zero integer "0"
closing bracket "]"
equality operator "=="
char literal "'='"
closing parenthesis ")"
opening brace "{"
word "nextChar"
opening parenthesis "("
word "tk"
closing parenthesis ")"
end-of-statement operator ";"
reserved word "return"
word "makeToken"
opening parenthesis "("
word "tk"
comma ","
string literal '"not-equals operator"'
closing parenthesis ")"
end-of-statement operator ";"
closing brace "}"
reserved word "else"
opening brace "{"
reserved word "return"
word "_invalid"
opening parenthesis "("
word "tk"
closing parenthesis ")"
end-of-statement operator ";"
closing brace "}"
closing brace "}"
word "TokenT"
multiplication operator/pointer operator "*"
word "_double_quote"
opening parenthesis "("
word "TokenizerT"
multiplication operator/pointer operator "*"
word "tk"
closing parenthesis ")"
opening brace "{"
reserved word "int"
word "atEndOfFile"
assignment operator "="
word "nextChar"
opening parenthesis "("
word "tk"
closing parenthesis ")"
end-of-statement operator ";"
word "while"
opening parenthesis "("
word "tk"
struct pointer operator "->"
word "inputIter"
opening bracket "["
zero integer "0"
closing bracket "]"
not-equals operator "!="
char literal "'"'"
closing parenthesis ")"
opening brace "{"
reserved word "if"
opening parenthesis "("
word "tk"
struct pointer operator "->"
word "inputIter"
opening bracket "["
zero integer "0"
closing bracket "]"
equality operator "=="
char literal "'\\'"
closing parenthesis ")"
opening brace "{"
reserved word "if"
opening parenthesis "("
word "atEndOfFile"
closing parenthesis ")"
opening brace "{"
reserved word "return"
word "makeToken"
opening parenthesis "("
word "tk"
comma ","
string literal '"unended string literal"'
closing parenthesis ")"
end-of-statement operator ";"
closing brace "}"
word "atEndOfFile"
assignment operator "="
word "nextChar"
opening parenthesis "("
word "tk"
closing parenthesis ")"
end-of-statement operator ";"
closing brace "}"
reserved word "if"
opening parenthesis "("
word "atEndOfFile"
closing parenthesis ")"
opening brace "{"
reserved word "return"
word "makeToken"
opening parenthesis "("
word "tk"
comma ","
string literal '"unended string literal"'
closing parenthesis ")"
end-of-statement operator ";"
closing brace "}"
word "atEndOfFile"
assignment operator "="
word "nextChar"
opening parenthesis "("
word "tk"
closing parenthesis ")"
end-of-statement operator ";"
closing brace "}"
word "nextChar"
opening parenthesis "("
word "tk"
closing parenthesis ")"
end-of-statement operator ";"
reserved word "return"
word "makeToken"
opening parenthesis "("
word "tk"
comma ","
string literal '"string literal"'
closing parenthesis ")"
end-of-statement operator ";"
closing brace "}"
word "TokenT"
multiplication operator/pointer operator "*"
word "_mod"
opening parenthesis "("
word "TokenizerT"
multiplication operator/pointer operator "*"
word "tk"
closing parenthesis ")"
opening brace "{"
word "nextChar"
opening parenthesis "("
word "tk"
closing parenthesis ")"
end-of-statement operator ";"
reserved word "if"
opening parenthesis "("
word "tk"
struct pointer operator "->"
word "inputIter"
opening bracket "["
zero integer "0"
closing bracket "]"
equality operator "=="
char literal "'='"
closing parenthesis ")"
opening brace "{"
word "nextChar"
opening parenthesis "("
word "tk"
closing parenthesis ")"
end-of-statement operator ";"
reserved word "return"
word "makeToken"
opening parenthesis "("
word "tk"
comma ","
string literal '"mod-equals operator"'
closing parenthesis ")"
end-of-statement operator ";"
closing brace "}"
reserved word "else"
opening brace "{"
reserved word "return"
word "makeToken"
opening parenthesis "("
word "tk"
comma ","
string literal '"mod operator"'
closing parenthesis ")"
end-of-statement operator ";"
closing brace "}"
closing brace "}"
word "TokenT"
multiplication operator/pointer operator "*"
word "_bit_and"
opening parenthesis "("
word "TokenizerT"
multiplication operator/pointer operator "*"
word "tk"
closing parenthesis ")"
opening brace "{"
word "nextChar"
opening parenthesis "("
word "tk"
closing parenthesis ")"
end-of-statement operator ";"
reserved word "if"
opening parenthesis "("
word "tk"
struct pointer operator "->"
word "inputIter"
opening bracket "["
zero integer "0"
closing bracket "]"
equality operator "=="
char literal "'='"
closing parenthesis ")"
opening brace "{"
word "nextChar"
opening parenthesis "("
word "tk"
closing parenthesis ")"
end-of-statement operator ";"
reserved word "return"
word "makeToken"
opening parenthesis "("
word "tk"
comma ","
string literal '"bitwise-and-equals operator"'
closing parenthesis ")"
end-of-statement operator ";"
closing brace "}"
reserved word "else"
reserved word "if"
opening parenthesis "("
word "tk"
struct pointer operator "->"
word "inputIter"
opening bracket "["
zero integer "0"
closing bracket "]"
equality operator "=="
char literal "'&'"
closing parenthesis ")"
opening brace "{"
word "nextChar"
opening parenthesis "("
word "tk"
closing parenthesis ")"
end-of-statement operator ";"
reserved word "return"
word "makeToken"
opening parenthesis "("
word "tk"
comma ","
string literal '"logical-and operator"'
closing parenthesis ")"
end-of-statement operator ";"
closing brace "}"
reserved word "else"
opening brace "{"
reserved word "return"
word "makeToken"
opening parenthesis "("
word "tk"
comma ","
string literal '"bitwise-and operator/address operator"'
closing parenthesis ")"
end-of-statement operator ";"
closing brace "}"
closing brace "}"
word "TokenT"
multiplication operator/pointer operator "*"
word "_single_quote"
opening parenthesis "("
word "TokenizerT"
multiplication operator/pointer operator "*"
word "tk"
closing parenthesis ")"
opening brace "{"
reserved word "int"
word "atEndOfFile"
assignment operator "="
word "nextChar"
opening parenthesis "("
word "tk"
closing parenthesis ")"
end-of-statement operator ";"
reserved word "if"
opening parenthesis "("
word "atEndOfFile"
closing parenthesis ")"
opening brace "{"
reserved word "return"
word "makeToken"
opening parenthesis "("
word "tk"
comma ","
string literal '"incomplete char literal"'
closing parenthesis ")"
end-of-statement operator ";"
closing brace "}"
reserved word "if"
opening parenthesis "("
word "tk"
struct pointer operator "->"
word "inputIter"
opening bracket "["
zero integer "0"
closing bracket "]"
not-equals operator "!="
char literal "'\\'"
closing parenthesis ")"
opening brace "{"
word "atEndOfFile"
assignment operator "="
word "nextChar"
opening parenthesis "("
word "tk"
closing parenthesis ")"
end-of-statement operator ";"
reserved word "if"
opening parenthesis "("
word "atEndOfFile"
closing parenthesis ")"
opening brace "{"
reserved word "return"
word "makeToken"
opening parenthesis "("
word "tk"
comma ","
string literal '"incomplete char literal"'
closing parenthesis ")"
end-of-statement operator ";"
closing brace "}"
reserved word "if"
opening parenthesis "("
word "tk"
struct pointer operator "->"
word "inputIter"
opening bracket "["
zero integer "0"
closing bracket "]"
equality operator "=="
char literal "'\''"
closing parenthesis ")"
opening brace "{"
word "nextChar"
opening parenthesis "("
word "tk"
closing parenthesis ")"
end-of-statement operator ";"
reserved word "return"
word "makeToken"
opening parenthesis "("
word "tk"
comma ","
string literal '"char literal"'
closing parenthesis ")"
end-of-statement operator ";"
closing brace "}"
reserved word "else"
opening brace "{"
word "nextChar"
opening parenthesis "("
word "tk"
closing parenthesis ")"
end-of-statement operator ";"
reserved word "return"
word "makeToken"
opening parenthesis "("
word "tk"
comma ","
string literal '"invalid char literal"'
closing parenthesis ")"
end-of-statement operator ";"
closing brace "}"
closing brace "}"
reserved word "else"
opening brace "{"
word "atEndOfFile"
assignment operator "="
word "nextChar"
opening parenthesis "("
word "tk"
closing parenthesis ")"
end-of-statement operator ";"
reserved word "if"
opening parenthesis "("
word "atEndOfFile"
closing parenthesis ")"
opening brace "{"
reserved word "return"
word "makeToken"
opening parenthesis "("
word "tk"
comma ","
string literal '"incomplete char literal"'
closing parenthesis ")"
end-of-statement operator ";"
closing brace "}"
word "atEndOfFile"
assignment operator "="
word "nextChar"
opening parenthesis "("
word "tk"
closing parenthesis ")"
end-of-statement operator ";"
reserved word "if"
opening parenthesis "("
word "atEndOfFile"
closing parenthesis ")"
opening brace "{"
reserved word "return"
word "makeToken"
opening parenthesis "("
word "tk"
comma ","
string literal '"incomplete char literal"'
closing parenthesis ")"
end-of-statement operator ";"
closing brace "}"
reserved word "if"
opening parenthesis "("
word "tk"
struct pointer operator "->"
word "inputIter"
opening bracket "["
zero integer "0"
closing bracket "]"
equality operator "=="
char literal "'\''"
closing parenthesis ")"
opening brace "{"
word "nextChar"
opening parenthesis "("
word "tk"
closing parenthesis ")"
end-of-statement operator ";"
reserved word "return"
word "makeToken"
opening parenthesis "("
word "tk"
comma ","
string literal '"char literal"'
closing parenthesis ")"
end-of-statement operator ";"
closing brace "}"
reserved word "else"
opening brace "{"
word "nextChar"
opening parenthesis "("
word "tk"
closing parenthesis ")"
end-of-statement operator ";"
reserved word "return"
word "makeToken"
opening parenthesis "("
word "tk"
comma ","
string literal '"invalid char literal"'
closing parenthesis ")"
end-of-statement operator ";"
closing brace "}"
closing brace "}"
closing brace "}"
word "TokenT"
multiplication operator/pointer operator "*"
word "_open_paren"
opening parenthesis "("
word "TokenizerT"
multiplication operator/pointer operator "*"
word "tk"
closing parenthesis ")"
opening brace "{"
word "nextChar"
opening parenthesis "("
word "tk"
closing parenthesis ")"
end-of-statement operator ";"
reserved word "return"
word "makeToken"
opening parenthesis "("
word "tk"
comma ","
string literal '"opening parenthesis"'
closing parenthesis ")"
end-of-statement operator ";"
closing brace "}"
word "TokenT"
multiplication operator/pointer operator "*"
word "_close_paren"
opening parenthesis "("
word "TokenizerT"
multiplication operator/pointer operator "*"
word "tk"
closing parenthesis ")"
opening brace "{"
word "nextChar"
opening parenthesis "("
word "tk"
closing parenthesis ")"
end-of-statement operator ";"
reserved word "return"
word "makeToken"
opening parenthesis "("
word "tk"
comma ","
string literal '"closing parenthesis"'
closing parenthesis ")"
end-of-statement operator ";"
closing brace "}"
word "TokenT"
multiplication operator/pointer operator "*"
word "_mult"
opening parenthesis "("
word "TokenizerT"
multiplication operator/pointer operator "*"
word "tk"
closing parenthesis ")"
opening brace "{"
word "nextChar"
opening parenthesis "("
word "tk"
closing parenthesis ")"
end-of-statement operator ";"
reserved word "if"
opening parenthesis "("
word "tk"
struct pointer operator "->"
word "inputIter"
opening bracket "["
zero integer "0"
closing bracket "]"
equality operator "=="
char literal "'='"
closing parenthesis ")"
opening brace "{"
word "nextChar"
opening parenthesis "("
word "tk"
closing parenthesis ")"
end-of-statement operator ";"
reserved word "return"
word "makeToken"
opening parenthesis "("
word "tk"
comma ","
string literal '"multiply-equals operator"'
closing parenthesis ")"
end-of-statement operator ";"
closing brace "}"
reserved word "return"
word "makeToken"
opening parenthesis "("
word "tk"
comma ","
string literal '"multiplication operator/pointer operator"'
closing parenthesis ")"
end-of-statement operator ";"
closing brace "}"
word "TokenT"
multiplication operator/pointer operator "*"
word "_plus"
opening parenthesis "("
word "TokenizerT"
multiplication operator/pointer operator "*"
word "tk"
closing parenthesis ")"
opening brace "{"
word "nextChar"
opening parenthesis "("
word "tk"
closing parenthesis ")"
end-of-statement operator ";"
reserved word "if"
opening parenthesis "("
word "tk"
struct pointer operator "->"
word "inputIter"
opening bracket "["
zero integer "0"
closing bracket "]"
equality operator "=="
char literal "'='"
closing parenthesis ")"
opening brace "{"
word "nextChar"
opening parenthesis "("
word "tk"
closing parenthesis ")"
end-of-statement operator ";"
reserved word "return"
word "makeToken"
opening parenthesis "("
word "tk"
comma ","
string literal '"plus-equals operator"'
closing parenthesis ")"
end-of-statement operator ";"
closing brace "}"
reserved word "else"
reserved word "if"
opening parenthesis "("
word "tk"
struct pointer operator "->"
word "inputIter"
opening bracket "["
zero integer "0"
closing bracket "]"
equality operator "=="
char literal "'+'"
closing parenthesis ")"
opening brace "{"
word "nextChar"
opening parenthesis "("
word "tk"
closing parenthesis ")"
end-of-statement operator ";"
reserved word "return"
word "makeToken"
opening parenthesis "("
word "tk"
comma ","
string literal '"increment operator"'
closing parenthesis ")"
end-of-statement operator ";"
closing brace "}"
reserved word "return"
word "makeToken"
opening parenthesis "("
word "tk"
comma ","
string literal '"addition operator"'
closing parenthesis ")"
end-of-statement operator ";"
closing brace "}"
word "TokenT"
multiplication operator/pointer operator "*"
word "_comma"
opening parenthesis "("
word "TokenizerT"
multiplication operator/pointer operator "*"
word "tk"
closing parenthesis ")"
opening brace "{"
word "nextChar"
opening parenthesis "("
word "tk"
closing parenthesis ")"
end-of-statement operator ";"
reserved word "return"
word "makeToken"
opening parenthesis "("
word "tk"
comma ","
string literal '"comma"'
closing parenthesis ")"
end-of-statement operator ";"
closing brace "}"
word "TokenT"
multiplication operator/pointer operator "*"
word "_minus"
opening parenthesis "("
word "TokenizerT"
multiplication operator/pointer operator "*"
word "tk"
closing parenthesis ")"
opening brace "{"
word "nextChar"
opening parenthesis "("
word "tk"
closing parenthesis ")"
end-of-statement operator ";"
reserved word "if"
opening parenthesis "("
word "tk"
struct pointer operator "->"
word "inputIter"
opening bracket "["
zero integer "0"
closing bracket "]"
equality operator "=="
char literal "'='"
closing parenthesis ")"
opening brace "{"
word "nextChar"
opening parenthesis "("
word "tk"
closing parenthesis ")"
end-of-statement operator ";"
reserved word "return"
word "makeToken"
opening parenthesis "("
word "tk"
comma ","
string literal '"minus-equals operator"'
closing parenthesis ")"
end-of-statement operator ";"
closing brace "}"
reserved word "else"
reserved word "if"
opening parenthesis "("
word "tk"
struct pointer operator "->"
word "inputIter"
opening bracket "["
zero integer "0"
closing bracket "]"
equality operator "=="
char literal "'-'"
closing parenthesis ")"
opening brace "{"
word "nextChar"
opening parenthesis "("
word "tk"
closing parenthesis ")"
end-of-statement operator ";"
reserved word "return"
word "makeToken"
opening parenthesis "("
word "tk"
comma ","
string literal '"decrement operator"'
closing parenthesis ")"
end-of-statement operator ";"
closing brace "}"
reserved word "else"
reserved word "if"
opening parenthesis "("
word "tk"
struct pointer operator "->"
word "inputIter"
opening bracket "["
zero integer "0"
closing bracket "]"
equality operator "=="
char literal "'>'"
closing parenthesis ")"
opening brace "{"
word "nextChar"
opening parenthesis "("
word "tk"
closing parenthesis ")"
end-of-statement operator ";"
reserved word "return"
word "makeToken"
opening parenthesis "("
word "tk"
comma ","
string literal '"struct pointer operator"'
closing parenthesis ")"
end-of-statement operator ";"
closing brace "}"
reserved word "return"
word "makeToken"
opening parenthesis "("
word "tk"
comma ","
string literal '"subtraction operator"'
closing parenthesis ")"
end-of-statement operator ";"
closing brace "}"
word "TokenT"
multiplication operator/pointer operator "*"
word "_dot"
opening parenthesis "("
word "TokenizerT"
multiplication operator/pointer operator "*"
word "tk"
closing parenthesis ")"
opening brace "{"
word "nextChar"
opening parenthesis "("
word "tk"
closing parenthesis ")"
end-of-statement operator ";"
reserved word "return"
word "makeToken"
opening parenthesis "("
word "tk"
comma ","
string literal '"struct member operator"'
closing parenthesis ")"
end-of-statement operator ";"
closing brace "}"
word "TokenT"
multiplication operator/pointer operator "*"
word "_line_comment"
opening parenthesis "("
word "TokenizerT"
multiplication operator/pointer operator "*"
word "tk"
closing parenthesis ")"
opening brace "{"
word "while"
opening parenthesis "("
decimal integer "1"
closing parenthesis ")"
opening brace "{"
word "nextChar"
opening parenthesis "("
word "tk"
closing parenthesis ")"
end-of-statement operator ";"
word "clearBuffer"
opening parenthesis "("
word "tk"
closing parenthesis ")"
end-of-statement operator ";"
reserved word "if"
opening parenthesis "("
word "tk"
struct pointer operator "->"
word "inputIter"
opening bracket "["
zero integer "0"
closing bracket "]"
equality operator "=="
char literal "'\n'"
closing parenthesis ")"
opening brace "{"
word "nextChar"
opening parenthesis "("
word "tk"
closing parenthesis ")"
end-of-statement operator ";"
word "clearBuffer"
opening parenthesis "("
word "tk"
closing parenthesis ")"
end-of-statement operator ";"
reserved word "return"
word "TKGetNextToken"
opening parenthesis "("
word "tk"
closing parenthesis ")"
end-of-statement operator ";"
closing brace "}"
reserved word "if"
opening parenthesis "("
word "tk"
struct pointer operator "->"
word "inputIter"
opening bracket "["
zero integer "0"
closing bracket "]"
equality operator "=="
char literal "'\0'"
closing parenthesis ")"
opening brace "{"
reserved word "return"
word "TKGetNextToken"
opening parenthesis "("
word "tk"
closing parenthesis ")"
end-of-statement operator ";"
closing brace "}"
closing brace "}"
closing brace "}"
word "TokenT"
multiplication operator/pointer operator "*"
word "_block_comment"
opening parenthesis "("
word "TokenizerT"
multiplication operator/pointer operator "*"
word "tk"
closing parenthesis ")"
opening brace "{"
word "while"
opening parenthesis "("
decimal integer "1"
closing parenthesis ")"
opening brace "{"
word "nextChar"
opening parenthesis "("
word "tk"
closing parenthesis ")"
end-of-statement operator ";"
word "clearBuffer"
opening parenthesis "("
word "tk"
closing parenthesis ")"
end-of-statement operator ";"
word "while"
opening parenthesis "("
word "tk"
struct pointer operator "->"
word "inputIter"
opening bracket "["
zero integer "0"
closing bracket "]"
equality operator "=="
char literal "'*'"
closing parenthesis ")"
opening brace "{"
word "nextChar"
opening parenthesis "("
word "tk"
closing parenthesis ")"
end-of-statement operator ";"
word "clearBuffer"
opening parenthesis "("
word "tk"
closing parenthesis ")"
end-of-statement operator ";"
reserved word "if"
opening parenthesis "("
word "tk"
struct pointer operator "->"
word "inputIter"
opening bracket "["
zero integer "0"
closing bracket "]"
equality operator "=="
char literal "'/'"
closing parenthesis ")"
opening brace "{"
word "nextChar"
opening parenthesis "("
word "tk"
closing parenthesis ")"
end-of-statement operator ";"
word "clearBuffer"
opening parenthesis "("
word "tk"
closing parenthesis ")"
end-of-statement operator ";"
reserved word "return"
word "TKGetNextToken"
opening parenthesis "("
word "tk"
closing parenthesis ")"
end-of-statement operator ";"
closing brace "}"
closing brace "}"
reserved word "if"
opening parenthesis "("
word "tk"
struct pointer operator "->"
word "inputIter"
opening bracket "["
zero integer "0"
closing bracket "]"
equality operator "=="
char literal "'\0'"
closing parenthesis ")"
opening brace "{"
reserved word "return"
word "TKGetNextToken"
opening parenthesis "("
word "tk"
closing parenthesis ")"
end-of-statement operator ";"
closing brace "}"
closing brace "}"
closing brace "}"
word "TokenT"
multiplication operator/pointer operator "*"
word "_div"
opening parenthesis "("
word "TokenizerT"
multiplication operator/pointer operator "*"
word "tk"
closing parenthesis ")"
opening brace "{"
word "nextChar"
opening parenthesis "("
word "tk"
closing parenthesis ")"
end-of-statement operator ";"
reserved word "if"
opening parenthesis "("
word "tk"
struct pointer operator "->"
word "inputIter"
opening bracket "["
zero integer "0"
closing bracket "]"
equality operator "=="
char literal "'='"
closing parenthesis ")"
opening brace "{"
word "nextChar"
opening parenthesis "("
word "tk"
closing parenthesis ")"
end-of-statement operator ";"
reserved word "return"
word "makeToken"
opening parenthesis "("
word "tk"
comma ","
string literal '"divide-equals operator"'
closing parenthesis ")"
end-of-statement operator ";"
closing brace "}"
reserved word "if"
opening parenthesis "("
word "tk"
struct pointer operator "->"
word "inputIter"
opening bracket "["
zero integer "0"
closing bracket "]"
equality operator "=="
char literal "'/'"
closing parenthesis ")"
opening brace "{"
word "nextChar"
opening parenthesis "("
word "tk"
closing parenthesis ")"
end-of-statement operator ";"
reserved word "return"
word "_line_comment"
opening parenthesis "("
word "tk"
closing parenthesis ")"
end-of-statement operator ";"
closing brace "}"
reserved word "if"
opening parenthesis "("
word "tk"
struct pointer operator "->"
word "inputIter"
opening bracket "["
zero integer "0"
closing bracket "]"
equality operator "=="
char literal "'*'"
closing parenthesis ")"
opening brace "{"
word "nextChar"
opening parenthesis "("
word "tk"
closing parenthesis ")"
end-of-statement operator ";"
reserved word "return"
word "_block_comment"
opening parenthesis "("
word "tk"
closing parenthesis ")"
end-of-statement operator ";"
closing brace "}"
reserved word "return"
word "makeToken"
opening parenthesis "("
word "tk"
comma ","
string literal '"division operator"'
closing parenthesis ")"
end-of-statement operator ";"
closing brace "}"
word "TokenT"
multiplication operator/pointer operator "*"
word "_ternary_colon"
opening parenthesis "("
word "TokenizerT"
multiplication operator/pointer operator "*"
word "tk"
closing parenthesis ")"
opening brace "{"
word "nextChar"
opening parenthesis "("
word "tk"
closing parenthesis ")"
end-of-statement operator ";"
reserved word "return"
word "makeToken"
opening parenthesis "("
word "tk"
comma ","
string literal '"ternary colon operator"'
closing parenthesis ")"
end-of-statement operator ";"
closing brace "}"
word "TokenT"
multiplication operator/pointer operator "*"
word "_semicolon"
opening parenthesis "("
word "TokenizerT"
multiplication operator/pointer operator "*"
word "tk"
closing parenthesis ")"
opening brace "{"
word "nextChar"
opening parenthesis "("
word "tk"
closing parenthesis ")"
end-of-statement operator ";"
reserved word "return"
word "makeToken"
opening parenthesis "("
word "tk"
comma ","
string literal '"end-of-statement operator"'
closing parenthesis ")"
end-of-statement operator ";"
closing brace "}"
word "TokenT"
multiplication operator/pointer operator "*"
word "_lt"
opening parenthesis "("
word "TokenizerT"
multiplication operator/pointer operator "*"
word "tk"
closing parenthesis ")"
opening brace "{"
word "nextChar"
opening parenthesis "("
word "tk"
closing parenthesis ")"
end-of-statement operator ";"
reserved word "if"
opening parenthesis "("
word "tk"
struct pointer operator "->"
word "inputIter"
opening bracket "["
zero integer "0"
closing bracket "]"
equality operator "=="
char literal "'='"
closing parenthesis ")"
opening brace "{"
word "nextChar"
opening parenthesis "("
word "tk"
closing parenthesis ")"
end-of-statement operator ";"
reserved word "return"
word "makeToken"
opening parenthesis "("
word "tk"
comma ","
string literal '"less-than-or-equal-to operator"'
closing parenthesis ")"
end-of-statement operator ";"
closing brace "}"
reserved word "else"
reserved word "if"
opening parenthesis "("
word "tk"
struct pointer operator "->"
word "inputIter"
opening bracket "["
zero integer "0"
closing bracket "]"
equality operator "=="
char literal "'<'"
closing parenthesis ")"
opening brace "{"
word "nextChar"
opening parenthesis "("
word "tk"
closing parenthesis ")"
end-of-statement operator ";"
reserved word "if"
opening parenthesis "("
word "tk"
struct pointer operator "->"
word "inputIter"
opening bracket "["
zero integer "0"
closing bracket "]"
equality operator "=="
char literal "'='"
closing parenthesis ")"
opening brace "{"
word "nextChar"
opening parenthesis "("
word "tk"
closing parenthesis ")"
end-of-statement operator ";"
reserved word "return"
word "makeToken"
opening parenthesis "("
word "tk"
comma ","
string literal '"left-shift-equals operator"'
closing parenthesis ")"
end-of-statement operator ";"
closing brace "}"
reserved word "return"
word "makeToken"
opening parenthesis "("
word "tk"
comma ","
string literal '"left-shift operator"'
closing parenthesis ")"
end-of-statement operator ";"
closing brace "}"
reserved word "return"
word "makeToken"
opening parenthesis "("
word "tk"
comma ","
string literal '"less-than operator"'
closing parenthesis ")"
end-of-statement operator ";"
closing brace "}"
word "TokenT"
multiplication operator/pointer operator "*"
word "_eq"
opening parenthesis "("
word "TokenizerT"
multiplication operator/pointer operator "*"
word "tk"
closing parenthesis ")"
opening brace "{"
word "nextChar"
opening parenthesis "("
word "tk"
closing parenthesis ")"
end-of-statement operator ";"
reserved word "if"
opening parenthesis "("
word "tk"
struct pointer operator "->"
word "inputIter"
opening bracket "["
zero integer "0"
closing bracket "]"
equality operator "=="
char literal "'='"
closing parenthesis ")"
opening brace "{"
word "nextChar"
opening parenthesis "("
word "tk"
closing parenthesis ")"
end-of-statement operator ";"
reserved word "return"
word "makeToken"
opening parenthesis "("
word "tk"
comma ","
string literal '"equality operator"'
closing parenthesis ")"
end-of-statement operator ";"
closing brace "}"
reserved word "return"
word "makeToken"
opening parenthesis "("
word "tk"
comma ","
string literal '"assignment operator"'
closing parenthesis ")"
end-of-statement operator ";"
closing brace "}"
word "TokenT"
multiplication operator/pointer operator "*"
word "_gt"
opening parenthesis "("
word "TokenizerT"
multiplication operator/pointer operator "*"
word "tk"
closing parenthesis ")"
opening brace "{"
word "nextChar"
opening parenthesis "("
word "tk"
closing parenthesis ")"
end-of-statement operator ";"
reserved word "if"
opening parenthesis "("
word "tk"
struct pointer operator "->"
word "inputIter"
opening bracket "["
zero integer "0"
closing bracket "]"
equality operator "=="
char literal "'='"
closing parenthesis ")"
opening brace "{"
word "nextChar"
opening parenthesis "("
word "tk"
closing parenthesis ")"
end-of-statement operator ";"
reserved word "return"
word "makeToken"
opening parenthesis "("
word "tk"
comma ","
string literal '"greater-than-or-equal-to operator"'
closing parenthesis ")"
end-of-statement operator ";"
closing brace "}"
reserved word "else"
reserved word "if"
opening parenthesis "("
word "tk"
struct pointer operator "->"
word "inputIter"
opening bracket "["
zero integer "0"
closing bracket "]"
equality operator "=="
char literal "'>'"
closing parenthesis ")"
opening brace "{"
word "nextChar"
opening parenthesis "("
word "tk"
closing parenthesis ")"
end-of-statement operator ";"
reserved word "if"
opening parenthesis "("
word "tk"
struct pointer operator "->"
word "inputIter"
opening bracket "["
zero integer "0"
closing bracket "]"
equality operator "=="
char literal "'='"
closing parenthesis ")"
opening brace "{"
word "nextChar"
opening parenthesis "("
word "tk"
closing parenthesis ")"
end-of-statement operator ";"
reserved word "return"
word "makeToken"
opening parenthesis "("
word "tk"
comma ","
string literal '"right-shift-equals operator"'
closing parenthesis ")"
end-of-statement operator ";"
closing brace "}"
reserved word "return"
word "makeToken"
opening parenthesis "("
word "tk"
comma ","
string literal '"right-shift operator"'
closing parenthesis ")"
end-of-statement operator ";"
closing brace "}"
reserved word "return"
word "makeToken"
opening parenthesis "("
word "tk"
comma ","
string literal '"greater-than operator"'
closing parenthesis ")"
end-of-statement operator ";"
closing brace "}"
word "TokenT"
multiplication operator/pointer operator "*"
word "_ternary_qmark"
opening parenthesis "("
word "TokenizerT"
multiplication operator/pointer operator "*"
word "tk"
closing parenthesis ")"
opening brace "{"
word "nextChar"
opening parenthesis "("
word "tk"
closing parenthesis ")"
end-of-statement operator ";"
reserved word "return"
word "makeToken"
opening parenthesis "("
word "tk"
comma ","
string literal '"ternary question mark operator"'
closing parenthesis ")"
end-of-statement operator ";"
closing brace "}"
word "TokenT"
multiplication operator/pointer operator "*"
word "_open_bracket"
opening parenthesis "("
word "TokenizerT"
multiplication operator/pointer operator "*"
word "tk"
closing parenthesis ")"
opening brace "{"
word "nextChar"
opening parenthesis "("
word "tk"
closing parenthesis ")"
end-of-statement operator ";"
reserved word "return"
word "makeToken"
opening parenthesis "("
word "tk"
comma ","
string literal '"opening bracket"'
closing parenthesis ")"
end-of-statement operator ";"
closing brace "}"
word "TokenT"
multiplication operator/pointer operator "*"
word "_close_bracket"
opening parenthesis "("
word "TokenizerT"
multiplication operator/pointer operator "*"
word "tk"
closing parenthesis ")"
opening brace "{"
word "nextChar"
opening parenthesis "("
word "tk"
closing parenthesis ")"
end-of-statement operator ";"
reserved word "return"
word "makeToken"
opening parenthesis "("
word "tk"
comma ","
string literal '"closing bracket"'
closing parenthesis ")"
end-of-statement operator ";"
closing brace "}"
word "TokenT"
multiplication operator/pointer operator "*"
word "_bit_xor"
opening parenthesis "("
word "TokenizerT"
multiplication operator/pointer operator "*"
word "tk"
closing parenthesis ")"
opening brace "{"
word "nextChar"
opening parenthesis "("
word "tk"
closing parenthesis ")"
end-of-statement operator ";"
reserved word "return"
word "makeToken"
opening parenthesis "("
word "tk"
comma ","
string literal '"bitwise-xor operator"'
closing parenthesis ")"
end-of-statement operator ";"
closing brace "}"
word "TokenT"
multiplication operator/pointer operator "*"
word "_open_brace"
opening parenthesis "("
word "TokenizerT"
multiplication operator/pointer operator "*"
word "tk"
closing parenthesis ")"
opening brace "{"
word "nextChar"
opening parenthesis "("
word "tk"
closing parenthesis ")"
end-of-statement operator ";"
reserved word "return"
word "makeToken"
opening parenthesis "("
word "tk"
comma ","
string literal '"opening brace"'
closing parenthesis ")"
end-of-statement operator ";"
closing brace "}"
word "TokenT"
multiplication operator/pointer operator "*"
word "_bit_or"
opening parenthesis "("
word "TokenizerT"
multiplication operator/pointer operator "*"
word "tk"
closing parenthesis ")"
opening brace "{"
word "nextChar"
opening parenthesis "("
word "tk"
closing parenthesis ")"
end-of-statement operator ";"
reserved word "if"
opening parenthesis "("
word "tk"
struct pointer operator "->"
word "inputIter"
opening bracket "["
zero integer "0"
closing bracket "]"
equality operator "=="
char literal "'|'"
closing parenthesis ")"
opening brace "{"
word "nextChar"
opening parenthesis "("
word "tk"
closing parenthesis ")"
end-of-statement operator ";"
reserved word "return"
word "makeToken"
opening parenthesis "("
word "tk"
comma ","
string literal '"logical-or operator"'
closing parenthesis ")"
end-of-statement operator ";"
closing brace "}"
reserved word "else"
reserved word "if"
opening parenthesis "("
word "tk"
struct pointer operator "->"
word "inputIter"
opening bracket "["
zero integer "0"
closing bracket "]"
equality operator "=="
char literal "'='"
closing parenthesis ")"
opening brace "{"
word "nextChar"
opening parenthesis "("
word "tk"
closing parenthesis ")"
end-of-statement operator ";"
reserved word "return"
word "makeToken"
opening parenthesis "("
word "tk"
comma ","
string literal '"bitwise-or-equals operator"'
closing parenthesis ")"
end-of-statement operator ";"
closing brace "}"
reserved word "return"
word "makeToken"
opening parenthesis "("
word "tk"
comma ","
string literal '"bitwise-or operator"'
closing parenthesis ")"
end-of-statement operator ";"
closing brace "}"
word "TokenT"
multiplication operator/pointer operator "*"
word "_close_brace"
opening parenthesis "("
word "TokenizerT"
multiplication operator/pointer operator "*"
word "tk"
closing parenthesis ")"
opening brace "{"
word "nextChar"
opening parenthesis "("
word "tk"
closing parenthesis ")"
end-of-statement operator ";"
reserved word "return"
word "makeToken"
opening parenthesis "("
word "tk"
comma ","
string literal '"closing brace"'
closing parenthesis ")"
end-of-statement operator ";"
closing brace "}"
word "TokenT"
multiplication operator/pointer operator "*"
word "_bit_not"
opening parenthesis "("
word "TokenizerT"
multiplication operator/pointer operator "*"
word "tk"
closing parenthesis ")"
opening brace "{"
word "nextChar"
opening parenthesis "("
word "tk"
closing parenthesis ")"
end-of-statement operator ";"
reserved word "if"
opening parenthesis "("
word "tk"
struct pointer operator "->"
word "inputIter"
opening bracket "["
zero integer "0"
closing bracket "]"
equality operator "=="
char literal "'='"
closing parenthesis ")"
opening brace "{"
word "nextChar"
opening parenthesis "("
word "tk"
closing parenthesis ")"
end-of-statement operator ";"
reserved word "return"
word "makeToken"
opening parenthesis "("
word "tk"
comma ","
string literal '"bitwise-not-equals operator"'
closing parenthesis ")"
end-of-statement operator ";"
closing brace "}"
reserved word "return"
word "makeToken"
opening parenthesis "("
word "tk"
comma ","
string literal '"bitwise-not operator"'
closing parenthesis ")"
end-of-statement operator ";"
closing brace "}"
word "TokenT"
multiplication operator/pointer operator "*"
word "_pound"
opening parenthesis "("
word "TokenizerT"
multiplication operator/pointer operator "*"
word "tk"
closing parenthesis ")"
opening brace "{"
word "nextChar"
opening parenthesis "("
word "tk"
closing parenthesis ")"
end-of-statement operator ";"
reserved word "return"
word "makeToken"
opening parenthesis "("
word "tk"
comma ","
string literal '"include operator"'
closing parenthesis ")"
end-of-statement operator ";"
closing brace "}"
word "TokenT"
multiplication operator/pointer operator "*"
word "_expofloat"
opening parenthesis "("
word "TokenizerT"
multiplication operator/pointer operator "*"
word "tk"
comma ","
reserved word "int"
word "isFirst"
comma ","
reserved word "int"
word "lastWasSign"
closing parenthesis ")"
opening brace "{"
word "nextChar"
opening parenthesis "("
word "tk"
closing parenthesis ")"
end-of-statement operator ";"
reserved word "if"
opening parenthesis "("
word "isdigit"
opening parenthesis "("
word "tk"
struct pointer operator "->"
word "inputIter"
opening bracket "["
zero integer "0"
closing bracket "]"
closing parenthesis ")"
closing parenthesis ")"
opening brace "{"
reserved word "return"
word "_expofloat"
opening parenthesis "("
word "tk"
comma ","
zero integer "0"
comma ","
zero integer "0"
closing parenthesis ")"
end-of-statement operator ";"
closing brace "}"
reserved word "else"
reserved word "if"
opening parenthesis "("
word "tk"
struct pointer operator "->"
word "inputIter"
opening bracket "["
zero integer "0"
closing bracket "]"
equality operator "=="
char literal "'+'"
logical-or operator "||"
word "tk"
struct pointer operator "->"
word "inputIter"
opening bracket "["
zero integer "0"
closing bracket "]"
equality operator "=="
char literal "'-'"
closing parenthesis ")"
opening brace "{"
reserved word "if"
opening parenthesis "("
word "isFirst"
closing parenthesis ")"
opening brace "{"
reserved word "return"
word "_expofloat"
opening parenthesis "("
word "tk"
comma ","
zero integer "0"
comma ","
decimal integer "1"
closing parenthesis ")"
end-of-statement operator ";"
closing brace "}"
reserved word "else"
reserved word "if"
opening parenthesis "("
word "lastWasSign"
closing parenthesis ")"
opening brace "{"
reserved word "return"
word "_invalid"
opening parenthesis "("
word "tk"
closing parenthesis ")"
end-of-statement operator ";"
closing brace "}"
reserved word "else"
opening brace "{"
reserved word "return"
word "makeToken"
opening parenthesis "("
word "tk"
comma ","
string literal '"float with exponent"'
closing parenthesis ")"
end-of-statement operator ";"
closing brace "}"
closing brace "}"
reserved word "else"
opening brace "{"
reserved word "if"
opening parenthesis "("
word "isFirst"
closing parenthesis ")"
opening brace "{"
reserved word "return"
word "_invalid"
opening parenthesis "("
word "tk"
closing parenthesis ")"
end-of-statement operator ";"
closing brace "}"
reserved word "else"
reserved word "if"
opening parenthesis "("
word "lastWasSign"
closing parenthesis ")"
opening brace "{"
reserved word "return"
word "_invalid"
opening parenthesis "("
word "tk"
closing parenthesis ")"
end-of-statement operator ";"
closing brace "}"
reserved word "else"
opening brace "{"
reserved word "return"
word "makeToken"
opening parenthesis "("
word "tk"
comma ","
string literal '"float with exponent"'
closing parenthesis ")"
end-of-statement operator ";"
closing brace "}"
closing brace "}"
closing brace "}"
word "TokenT"
multiplication operator/pointer operator "*"
word "_float"
opening parenthesis "("
word "TokenizerT"
multiplication operator/pointer operator "*"
word "tk"
comma ","
reserved word "int"
word "isFirst"
closing parenthesis ")"
opening brace "{"
word "nextChar"
opening parenthesis "("
word "tk"
closing parenthesis ")"
end-of-statement operator ";"
reserved word "if"
opening parenthesis "("
word "isdigit"
opening parenthesis "("
word "tk"
struct pointer operator "->"
word "inputIter"
opening bracket "["
zero integer "0"
closing bracket "]"
closing parenthesis ")"
closing parenthesis ")"
opening brace "{"
reserved word "return"
word "_float"
opening parenthesis "("
word "tk"
comma ","
zero integer "0"
closing parenthesis ")"
end-of-statement operator ";"
closing brace "}"
reserved word "else"
reserved word "if"
opening parenthesis "("
word "tk"
struct pointer operator "->"
word "inputIter"
opening bracket "["
zero integer "0"
closing bracket "]"
equality operator "=="
char literal "'e'"
logical-or operator "||"
word "tk"
struct pointer operator "->"
word "inputIter"
opening bracket "["
zero integer "0"
closing bracket "]"
equality operator "=="
char literal "'E'"
closing parenthesis ")"
opening brace "{"
reserved word "return"
word "_expofloat"
opening parenthesis "("
word "tk"
comma ","
decimal integer "1"
comma ","
zero integer "0"
closing parenthesis ")"
end-of-statement operator ";"
closing brace "}"
reserved word "else"
opening brace "{"
reserved word "if"
opening parenthesis "("
word "isFirst"
closing parenthesis ")"
opening brace "{"
reserved word "return"
word "_invalid"
opening parenthesis "("
word "tk"
closing parenthesis ")"
end-of-statement operator ";"
closing brace "}"
reserved word "else"
opening brace "{"
reserved word "return"
word "makeToken"
opening parenthesis "("
word "tk"
comma ","
string literal '"float"'
closing parenthesis ")"
end-of-statement operator ";"
closing brace "}"
closing brace "}"
closing brace "}"
word "TokenT"
multiplication operator/pointer operator "*"
word "_octal"
opening parenthesis "("
word "TokenizerT"
multiplication operator/pointer operator "*"
word "tk"
closing parenthesis ")"
opening brace "{"
word "nextChar"
opening parenthesis "("
word "tk"
closing parenthesis ")"
end-of-statement operator ";"
reserved word "if"
opening parenthesis "("
word "isOctal"
opening parenthesis "("
word "tk"
struct pointer operator "->"
word "inputIter"
opening bracket "["
zero integer "0"
closing bracket "]"
closing parenthesis ")"
closing parenthesis ")"
opening brace "{"
reserved word "return"
word "_octal"
opening parenthesis "("
word "tk"
closing parenthesis ")"
end-of-statement operator ";"
closing brace "}"
reserved word "else"
opening brace "{"
reserved word "return"
word "makeToken"
opening parenthesis "("
word "tk"
comma ","
string literal '"octal integer"'
closing parenthesis ")"
end-of-statement operator ";"
closing brace "}"
closing brace "}"
word "TokenT"
multiplication operator/pointer operator "*"
word "_hex"
opening parenthesis "("
word "TokenizerT"
multiplication operator/pointer operator "*"
word "tk"
comma ","
reserved word "int"
word "isFirst"
closing parenthesis ")"
opening brace "{"
word "nextChar"
opening parenthesis "("
word "tk"
closing parenthesis ")"
end-of-statement operator ";"
reserved word "if"
opening parenthesis "("
word "isxdigit"
opening parenthesis "("
word "tk"
struct pointer operator "->"
word "inputIter"
opening bracket "["
zero integer "0"
closing bracket "]"
closing parenthesis ")"
closing parenthesis ")"
opening brace "{"
reserved word "return"
word "_hex"
opening parenthesis "("
word "tk"
comma ","
zero integer "0"
closing parenthesis ")"
end-of-statement operator ";"
closing brace "}"
reserved word "else"
opening brace "{"
reserved word "if"
opening parenthesis "("
word "isFirst"
closing parenthesis ")"
opening brace "{"
reserved word "return"
word "_invalid"
opening parenthesis "("
word "tk"
closing parenthesis ")"
end-of-statement operator ";"
closing brace "}"
reserved word "else"
opening brace "{"
reserved word "return"
word "makeToken"
opening parenthesis "("
word "tk"
comma ","
string literal '"hexadecimal integer"'
closing parenthesis ")"
end-of-statement operator ";"
closing brace "}"
closing brace "}"
closing brace "}"
word "TokenT"
multiplication operator/pointer operator "*"
word "_decimal"
opening parenthesis "("
word "TokenizerT"
multiplication operator/pointer operator "*"
word "tk"
closing parenthesis ")"
opening brace "{"
word "nextChar"
opening parenthesis "("
word "tk"
closing parenthesis ")"
end-of-statement operator ";"
reserved word "if"
opening parenthesis "("
word "isdigit"
opening parenthesis "("
word "tk"
struct pointer operator "->"
word "inputIter"
opening bracket "["
zero integer "0"
closing bracket "]"
closing parenthesis ")"
closing parenthesis ")"
opening brace "{"
reserved word "return"
word "_decimal"
opening parenthesis "("
word "tk"
closing parenthesis ")"
end-of-statement operator ";"
closing brace "}"
reserved word "else"
reserved word "if"
opening parenthesis "("
word "tk"
struct pointer operator "->"
word "inputIter"
opening bracket "["
zero integer "0"
closing bracket "]"
equality operator "=="
char literal "'.'"
closing parenthesis ")"
opening brace "{"
reserved word "return"
word "_float"
opening parenthesis "("
word "tk"
comma ","
decimal integer "1"
closing parenthesis ")"
end-of-statement operator ";"
closing brace "}"
reserved word "else"
reserved word "if"
opening parenthesis "("
word "tk"
struct pointer operator "->"
word "inputIter"
opening bracket "["
zero integer "0"
closing bracket "]"
equality operator "=="
char literal "'e'"
logical-or operator "||"
word "tk"
struct pointer operator "->"
word "inputIter"
opening bracket "["
zero integer "0"
closing bracket "]"
equality operator "=="
char literal "'E'"
closing parenthesis ")"
opening brace "{"
reserved word "return"
word "_expofloat"
opening parenthesis "("
word "tk"
comma ","
decimal integer "1"
comma ","
zero integer "0"
closing parenthesis ")"
end-of-statement operator ";"
closing brace "}"
reserved word "else"
opening brace "{"
reserved word "return"
word "makeToken"
opening parenthesis "("
word "tk"
comma ","
string literal '"decimal integer"'
closing parenthesis ")"
end-of-statement operator ";"
closing brace "}"
closing brace "}"
word "TokenT"
multiplication operator/pointer operator "*"
word "_zero"
opening parenthesis "("
word "TokenizerT"
multiplication operator/pointer operator "*"
word "tk"
closing parenthesis ")"
opening brace "{"
word "nextChar"
opening parenthesis "("
word "tk"
closing parenthesis ")"
end-of-statement operator ";"
reserved word "if"
opening parenthesis "("
word "isOctal"
opening parenthesis "("
word "tk"
struct pointer operator "->"
word "inputIter"
opening bracket "["
zero integer "0"
closing bracket "]"
closing parenthesis ")"
closing parenthesis ")"
opening brace "{"
reserved word "return"
word "_octal"
opening parenthesis "("
word "tk"
closing parenthesis ")"
end-of-statement operator ";"
closing brace "}"
reserved word "else"
reserved word "if"
opening parenthesis "("
word "tk"
struct pointer operator "->"
word "inputIter"
opening bracket "["
zero integer "0"
closing bracket "]"
equality operator "=="
char literal "'x'"
logical-or operator "||"
opening parenthesis "("
word "tk"
struct pointer operator "->"
word "inputIter"
opening bracket "["
zero integer "0"
closing bracket "]"
closing parenthesis ")"
equality operator "=="
char literal "'X'"
closing parenthesis ")"
opening brace "{"
reserved word "return"
word "_hex"
opening parenthesis "("
word "tk"
comma ","
decimal integer "1"
closing parenthesis ")"
end-of-statement operator ";"
closing brace "}"
reserved word "else"
reserved word "if"
opening parenthesis "("
word "tk"
struct pointer operator "->"
word "inputIter"
opening bracket "["
zero integer "0"
closing bracket "]"
equality operator "=="
char literal "'.'"
closing parenthesis ")"
opening brace "{"
reserved word "return"
word "_float"
opening parenthesis "("
word "tk"
comma ","
decimal integer "1"
closing parenthesis ")"
end-of-statement operator ";"
closing brace "}"
reserved word "else"
opening brace "{"
reserved word "return"
word "makeToken"
opening parenthesis "("
word "tk"
comma ","
string literal '"zero integer"'
closing parenthesis ")"
end-of-statement operator ";"
closing brace "}"
closing brace "}"
word "TokenT"
multiplication operator/pointer operator "*"
word "TKGetNextToken"
opening parenthesis "("
word "TokenizerT"
multiplication operator/pointer operator "*"
word "tk"
closing parenthesis ")"
opening brace "{"
word "clearBuffer"
opening parenthesis "("
word "tk"
closing parenthesis ")"
end-of-statement operator ";"
reserved word "char"
word "curr"
assignment operator "="
word "tk"
struct pointer operator "->"
word "inputIter"
opening bracket "["
zero integer "0"
closing bracket "]"
end-of-statement operator ";"
word "while"
opening parenthesis "("
word "isspace"
opening parenthesis "("
word "curr"
closing parenthesis ")"
closing parenthesis ")"
opening brace "{"
word "nextChar"
opening parenthesis "("
word "tk"
closing parenthesis ")"
end-of-statement operator ";"
word "clearBuffer"
opening parenthesis "("
word "tk"
closing parenthesis ")"
end-of-statement operator ";"
word "curr"
assignment operator "="
word "tk"
struct pointer operator "->"
word "inputIter"
opening bracket "["
zero integer "0"
closing bracket "]"
end-of-statement operator ";"
closing brace "}"
reserved word "if"
opening parenthesis "("
word "curr"
equality operator "=="
char literal "'\0'"
closing parenthesis ")"
opening brace "{"
reserved word "return"
word "NULL"
end-of-statement operator ";"
closing brace "}"
reserved word "else"
reserved word "if"
opening parenthesis "("
word "isalpha"
opening parenthesis "("
word "curr"
closing parenthesis ")"
logical-or operator "||"
word "curr"
equality operator "=="
char literal "'_'"
closing parenthesis ")"
opening brace "{"
reserved word "return"
word "_word"
opening parenthesis "("
word "tk"
closing parenthesis ")"
end-of-statement operator ";"
closing brace "}"
reserved word "else"
reserved word "if"
opening parenthesis "("
word "curr"
equality operator "=="
char literal "'0'"
closing parenthesis ")"
opening brace "{"
reserved word "return"
word "_zero"
opening parenthesis "("
word "tk"
closing parenthesis ")"
end-of-statement operator ";"
closing brace "}"
reserved word "else"
reserved word "if"
opening parenthesis "("
word "isdigit"
opening parenthesis "("
word "curr"
closing parenthesis ")"
closing parenthesis ")"
opening brace "{"
reserved word "return"
word "_decimal"
opening parenthesis "("
word "tk"
closing parenthesis ")"
end-of-statement operator ";"
closing brace "}"
reserved word "else"
reserved word "if"
opening parenthesis "("
word "curr"
equality operator "=="
char literal "'!'"
closing parenthesis ")"
opening brace "{"
reserved word "return"
word "_neq"
opening parenthesis "("
word "tk"
closing parenthesis ")"
end-of-statement operator ";"
closing brace "}"
reserved word "else"
reserved word "if"
opening parenthesis "("
word "curr"
equality operator "=="
char literal "'"'"
closing parenthesis ")"
opening brace "{"
reserved word "return"
word "_double_quote"
opening parenthesis "("
word "tk"
closing parenthesis ")"
end-of-statement operator ";"
closing brace "}"
reserved word "else"
reserved word "if"
opening parenthesis "("
word "curr"
equality operator "=="
char literal "'#'"
closing parenthesis ")"
opening brace "{"
reserved word "return"
word "_pound"
opening parenthesis "("
word "tk"
closing parenthesis ")"
end-of-statement operator ";"
closing brace "}"
reserved word "else"
reserved word "if"
opening parenthesis "("
word "curr"
equality operator "=="
char literal "'$'"
closing parenthesis ")"
opening brace "{"
reserved word "return"
word "_invalid"
opening parenthesis "("
word "tk"
closing parenthesis ")"
end-of-statement operator ";"
closing brace "}"
reserved word "else"
reserved word "if"
opening parenthesis "("
word "curr"
equality operator "=="
char literal "'%'"
closing parenthesis ")"
opening brace "{"
reserved word "return"
word "_mod"
opening parenthesis "("
word "tk"
closing parenthesis ")"
end-of-statement operator ";"
closing brace "}"
reserved word "else"
reserved word "if"
opening parenthesis "("
word "curr"
equality operator "=="
char literal "'&'"
closing parenthesis ")"
opening brace "{"
reserved word "return"
word "_bit_and"
opening parenthesis "("
word "tk"
closing parenthesis ")"
end-of-statement operator ";"
closing brace "}"
reserved word "else"
reserved word "if"
opening parenthesis "("
word "curr"
equality operator "=="
char literal "'\''"
closing parenthesis ")"
opening brace "{"
reserved word "return"
word "_single_quote"
opening parenthesis "("
word "tk"
closing parenthesis ")"
end-of-statement operator ";"
closing brace "}"
reserved word "else"
reserved word "if"
opening parenthesis "("
word "curr"
equality operator "=="
char literal "'('"
closing parenthesis ")"
opening brace "{"
reserved word "return"
word "_open_paren"
opening parenthesis "("
word "tk"
closing parenthesis ")"
end-of-statement operator ";"
closing brace "}"
reserved word "else"
reserved word "if"
opening parenthesis "("
word "curr"
equality operator "=="
char literal "')'"
closing parenthesis ")"
opening brace "{"
reserved word "return"
word "_close_paren"
opening parenthesis "("
word "tk"
closing parenthesis ")"
end-of-statement operator ";"
closing brace "}"
reserved word "else"
reserved word "if"
opening parenthesis "("
word "curr"
equality operator "=="
char literal "'*'"
closing parenthesis ")"
opening brace "{"
reserved word "return"
word "_mult"
opening parenthesis "("
word "tk"
closing parenthesis ")"
end-of-statement operator ";"
closing brace "}"
reserved word "else"
reserved word "if"
opening parenthesis "("
word "curr"
equality operator "=="
char literal "'+'"
closing parenthesis ")"
opening brace "{"
reserved word "return"
word "_plus"
opening parenthesis "("
word "tk"
closing parenthesis ")"
end-of-statement operator ";"
closing brace "}"
reserved word "else"
reserved word "if"
opening parenthesis "("
word "curr"
equality operator "=="
char literal "','"
closing parenthesis ")"
opening brace "{"
reserved word "return"
word "_comma"
opening parenthesis "("
word "tk"
closing parenthesis ")"
end-of-statement operator ";"
closing brace "}"
reserved word "else"
reserved word "if"
opening parenthesis "("
word "curr"
equality operator "=="
char literal "'-'"
closing parenthesis ")"
opening brace "{"
reserved word "return"
word "_minus"
opening parenthesis "("
word "tk"
closing parenthesis ")"
end-of-statement operator ";"
closing brace "}"
reserved word "else"
reserved word "if"
opening parenthesis "("
word "curr"
equality operator "=="
char literal "'.'"
closing parenthesis ")"
opening brace "{"
reserved word "return"
word "_dot"
opening parenthesis "("
word "tk"
closing parenthesis ")"
end-of-statement operator ";"
closing brace "}"
reserved word "else"
reserved word "if"
opening parenthesis "("
word "curr"
equality operator "=="
char literal "'/'"
closing parenthesis ")"
opening brace "{"
reserved word "return"
word "_div"
opening parenthesis "("
word "tk"
closing parenthesis ")"
end-of-statement operator ";"
closing brace "}"
reserved word "else"
reserved word "if"
opening parenthesis "("
word "curr"
equality operator "=="
char literal "':'"
closing parenthesis ")"
opening brace "{"
reserved word "return"
word "_ternary_colon"
opening parenthesis "("
word "tk"
closing parenthesis ")"
end-of-statement operator ";"
closing brace "}"
reserved word "else"
reserved word "if"
opening parenthesis "("
word "curr"
equality operator "=="
char literal "';'"
closing parenthesis ")"
opening brace "{"
reserved word "return"
word "_semicolon"
opening parenthesis "("
word "tk"
closing parenthesis ")"
end-of-statement operator ";"
closing brace "}"
reserved word "else"
reserved word "if"
opening parenthesis "("
word "curr"
equality operator "=="
char literal "'<'"
closing parenthesis ")"
opening brace "{"
reserved word "return"
word "_lt"
opening parenthesis "("
word "tk"
closing parenthesis ")"
end-of-statement operator ";"
closing brace "}"
reserved word "else"
reserved word "if"
opening parenthesis "("
word "curr"
equality operator "=="
char literal "'='"
closing parenthesis ")"
opening brace "{"
reserved word "return"
word "_eq"
opening parenthesis "("
word "tk"
closing parenthesis ")"
end-of-statement operator ";"
closing brace "}"
reserved word "else"
reserved word "if"
opening parenthesis "("
word "curr"
equality operator "=="
char literal "'>'"
closing parenthesis ")"
opening brace "{"
reserved word "return"
word "_gt"
opening parenthesis "("
word "tk"
closing parenthesis ")"
end-of-statement operator ";"
closing brace "}"
reserved word "else"
reserved word "if"
opening parenthesis "("
word "curr"
equality operator "=="
char literal "'?'"
closing parenthesis ")"
opening brace "{"
reserved word "return"
word "_ternary_qmark"
opening parenthesis "("
word "tk"
closing parenthesis ")"
end-of-statement operator ";"
closing brace "}"
reserved word "else"
reserved word "if"
opening parenthesis "("
word "curr"
equality operator "=="
char literal "'@'"
closing parenthesis ")"
opening brace "{"
reserved word "return"
word "_invalid"
opening parenthesis "("
word "tk"
closing parenthesis ")"
end-of-statement operator ";"
closing brace "}"
reserved word "else"
reserved word "if"
opening parenthesis "("
word "curr"
equality operator "=="
char literal "'['"
closing parenthesis ")"
opening brace "{"
reserved word "return"
word "_open_bracket"
opening parenthesis "("
word "tk"
closing parenthesis ")"
end-of-statement operator ";"
closing brace "}"
reserved word "else"
reserved word "if"
opening parenthesis "("
word "curr"
equality operator "=="
char literal "'\\'"
closing parenthesis ")"
opening brace "{"
reserved word "return"
word "_invalid"
opening parenthesis "("
word "tk"
closing parenthesis ")"
end-of-statement operator ";"
closing brace "}"
reserved word "else"
reserved word "if"
opening parenthesis "("
word "curr"
equality operator "=="
char literal "']'"
closing parenthesis ")"
opening brace "{"
reserved word "return"
word "_close_bracket"
opening parenthesis "("
word "tk"
closing parenthesis ")"
end-of-statement operator ";"
closing brace "}"
reserved word "else"
reserved word "if"
opening parenthesis "("
word "curr"
equality operator "=="
char literal "'^'"
closing parenthesis ")"
opening brace "{"
reserved word "return"
word "_bit_xor"
opening parenthesis "("
word "tk"
closing parenthesis ")"
end-of-statement operator ";"
closing brace "}"
reserved word "else"
reserved word "if"
opening parenthesis "("
word "curr"
equality operator "=="
char literal "'`'"
closing parenthesis ")"
opening brace "{"
reserved word "return"
word "_invalid"
opening parenthesis "("
word "tk"
closing parenthesis ")"
end-of-statement operator ";"
closing brace "}"
reserved word "else"
reserved word "if"
opening parenthesis "("
word "curr"
equality operator "=="
char literal "'{'"
closing parenthesis ")"
opening brace "{"
reserved word "return"
word "_open_brace"
opening parenthesis "("
word "tk"
closing parenthesis ")"
end-of-statement operator ";"
closing brace "}"
reserved word "else"
reserved word "if"
opening parenthesis "("
word "curr"
equality operator "=="
char literal "'|'"
closing parenthesis ")"
opening brace "{"
reserved word "return"
word "_bit_or"
opening parenthesis "("
word "tk"
closing parenthesis ")"
end-of-statement operator ";"
closing brace "}"
reserved word "else"
reserved word "if"
opening parenthesis "("
word "curr"
equality operator "=="
char literal "'}'"
closing parenthesis ")"
opening brace "{"
reserved word "return"
word "_close_brace"
opening parenthesis "("
word "tk"
closing parenthesis ")"
end-of-statement operator ";"
closing brace "}"
reserved word "else"
reserved word "if"
opening parenthesis "("
word "curr"
equality operator "=="
char literal "'~'"
closing parenthesis ")"
opening brace "{"
reserved word "return"
word "_bit_not"
opening parenthesis "("
word "tk"
closing parenthesis ")"
end-of-statement operator ";"
closing brace "}"
reserved word "else"
opening brace "{"
reserved word "return"
word "_invalid"
opening parenthesis "("
word "tk"
closing parenthesis ")"
end-of-statement operator ";"
closing brace "}"
closing brace "}"
reserved word "int"
word "main"
opening parenthesis "("
reserved word "int"
word "argc"
comma ","
reserved word "char"
multiplication operator/pointer operator "*"
multiplication operator/pointer operator "*"
word "argv"
closing parenthesis ")"
opening brace "{"
reserved word "if"
opening parenthesis "("
word "argc"
not-equals operator "!="
decimal integer "2"
closing parenthesis ")"
opening brace "{"
word "printf"
opening parenthesis "("
string literal '"Invalid number of arguments. \n"'
closing parenthesis ")"
end-of-statement operator ";"
word "printf"
opening parenthesis "("
string literal '"Usage: \n    ./tokenizer <C-code string>\n"'
closing parenthesis ")"
end-of-statement operator ";"
word "exit"
opening parenthesis "("
decimal integer "1"
closing parenthesis ")"
end-of-statement operator ";"
closing brace "}"
word "TokenizerT"
multiplication operator/pointer operator "*"
word "tokenizer"
assignment operator "="
word "TKCreate"
opening parenthesis "("
word "argv"
opening bracket "["
decimal integer "1"
closing bracket "]"
closing parenthesis ")"
end-of-statement operator ";"
word "TokenT"
multiplication operator/pointer operator "*"
word "token"
end-of-statement operator ";"
word "while"
opening parenthesis "("
opening parenthesis "("
word "token"
assignment operator "="
word "TKGetNextToken"
opening parenthesis "("
word "tokenizer"
closing parenthesis ")"
closing parenthesis ")"
not-equals operator "!="
word "NULL"
closing parenthesis ")"
opening brace "{"
word "printToken"
opening parenthesis "("
word "token"
closing parenthesis ")"
end-of-statement operator ";"
word "destroyToken"
opening parenthesis "("
word "token"
closing parenthesis ")"
end-of-statement operator ";"
closing brace "}"
word "TKDestroy"
opening parenthesis "("
word "tokenizer"
closing parenthesis ")"
end-of-statement operator ";"
reserved word "return"
zero integer "0"
end-of-statement operator ";"
closing brace "}"
